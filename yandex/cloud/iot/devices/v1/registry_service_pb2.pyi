"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions
import yandex.cloud.iot.devices.v1.registry_pb2
import yandex.cloud.operation.operation_pb2

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class GetRegistryRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry to return.

    To get a registry ID make a [RegistryService.List] request.
    """

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["registry_id",b"registry_id"]) -> None: ...
global___GetRegistryRequest = GetRegistryRequest

class GetByNameRegistryRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    FOLDER_ID_FIELD_NUMBER: builtins.int
    REGISTRY_NAME_FIELD_NUMBER: builtins.int
    folder_id: typing.Text
    """ID of the folder to list registries in.

    To get a folder ID make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    """

    registry_name: typing.Text
    """Name of the registry to return.

    To get a registry Name make a [RegistryService.List] request.
    """

    def __init__(self,
        *,
        folder_id: typing.Text = ...,
        registry_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["folder_id",b"folder_id","registry_name",b"registry_name"]) -> None: ...
global___GetByNameRegistryRequest = GetByNameRegistryRequest

class ListRegistriesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    FOLDER_ID_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    folder_id: typing.Text
    """ID of the folder to list registries in.

    To get a folder ID make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    """

    page_size: builtins.int
    """The maximum number of results per page that should be returned. If the number of available
    results is larger than `page_size`, the service returns a [ListRegistriesResponse.next_page_token]
    that can be used to get the next page of results in subsequent list requests.
    Default value: 100.
    """

    page_token: typing.Text
    """Page token. To get the next page of results, set `page_token` to the
    [ListRegistriesResponse.next_page_token] returned by a previous list request.
    """

    def __init__(self,
        *,
        folder_id: typing.Text = ...,
        page_size: builtins.int = ...,
        page_token: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["folder_id",b"folder_id","page_size",b"page_size","page_token",b"page_token"]) -> None: ...
global___ListRegistriesRequest = ListRegistriesRequest

class ListRegistriesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRIES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def registries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[yandex.cloud.iot.devices.v1.registry_pb2.Registry]:
        """List of registries."""
        pass
    next_page_token: typing.Text
    """Token for getting the next page of the list. If the number of results is greater than
    the specified [ListRegistriesRequest.page_size], use `next_page_token` as the value
    for the [ListRegistriesRequest.page_token] parameter in the next list request.

    Each subsequent page will have its own `next_page_token` to continue paging through the results.
    """

    def __init__(self,
        *,
        registries: typing.Optional[typing.Iterable[yandex.cloud.iot.devices.v1.registry_pb2.Registry]] = ...,
        next_page_token: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","registries",b"registries"]) -> None: ...
global___ListRegistriesResponse = ListRegistriesResponse

class CreateRegistryRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        value: typing.Text
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class Certificate(google.protobuf.message.Message):
        """Specification of a registry certificate."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        CERTIFICATE_DATA_FIELD_NUMBER: builtins.int
        certificate_data: typing.Text
        """Public part of the registry certificate."""

        def __init__(self,
            *,
            certificate_data: typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["certificate_data",b"certificate_data"]) -> None: ...

    FOLDER_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    CERTIFICATES_FIELD_NUMBER: builtins.int
    PASSWORD_FIELD_NUMBER: builtins.int
    folder_id: typing.Text
    """ID of the folder to create a registry in.

    To get a folder ID, make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    """

    name: typing.Text
    """Name of the registry. The name must be unique within the folder."""

    description: typing.Text
    """Description of the registry."""

    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Resource labels as `key:value` pairs."""
        pass
    @property
    def certificates(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CreateRegistryRequest.Certificate]:
        """Registry certificates."""
        pass
    password: typing.Text
    """Registry passwords.

    The password must contain at least three character categories among the following: upper case latin, lower case latin, numbers and special symbols.
    """

    def __init__(self,
        *,
        folder_id: typing.Text = ...,
        name: typing.Text = ...,
        description: typing.Text = ...,
        labels: typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        certificates: typing.Optional[typing.Iterable[global___CreateRegistryRequest.Certificate]] = ...,
        password: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["certificates",b"certificates","description",b"description","folder_id",b"folder_id","labels",b"labels","name",b"name","password",b"password"]) -> None: ...
global___CreateRegistryRequest = CreateRegistryRequest

class CreateRegistryMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry that is being created."""

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["registry_id",b"registry_id"]) -> None: ...
global___CreateRegistryMetadata = CreateRegistryMetadata

class UpdateRegistryRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        value: typing.Text
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    REGISTRY_ID_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry to update.

    To get a registry ID make a [RegistryService.List] request.
    """

    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Field mask that specifies which fields of the registry are going to be updated."""
        pass
    name: typing.Text
    """Name of the registry. The name must be unique within the folder."""

    description: typing.Text
    """Description of the registry."""

    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Resource labels as `key:value` pairs.

        Existing set of `labels` is completely replaced by the provided set.
        """
        pass
    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        update_mask: typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        name: typing.Text = ...,
        description: typing.Text = ...,
        labels: typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","labels",b"labels","name",b"name","registry_id",b"registry_id","update_mask",b"update_mask"]) -> None: ...
global___UpdateRegistryRequest = UpdateRegistryRequest

class UpdateRegistryMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry that is being updated."""

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["registry_id",b"registry_id"]) -> None: ...
global___UpdateRegistryMetadata = UpdateRegistryMetadata

class DeleteRegistryRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry to delete.

    To get a registry ID make a [RegistryService.List] request.
    """

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["registry_id",b"registry_id"]) -> None: ...
global___DeleteRegistryRequest = DeleteRegistryRequest

class DeleteRegistryMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry that is being deleted."""

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["registry_id",b"registry_id"]) -> None: ...
global___DeleteRegistryMetadata = DeleteRegistryMetadata

class ListRegistryCertificatesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry to list certificates for."""

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["registry_id",b"registry_id"]) -> None: ...
global___ListRegistryCertificatesRequest = ListRegistryCertificatesRequest

class ListRegistryCertificatesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CERTIFICATES_FIELD_NUMBER: builtins.int
    @property
    def certificates(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[yandex.cloud.iot.devices.v1.registry_pb2.RegistryCertificate]:
        """List of certificates for the specified registry."""
        pass
    def __init__(self,
        *,
        certificates: typing.Optional[typing.Iterable[yandex.cloud.iot.devices.v1.registry_pb2.RegistryCertificate]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["certificates",b"certificates"]) -> None: ...
global___ListRegistryCertificatesResponse = ListRegistryCertificatesResponse

class AddRegistryCertificateRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    CERTIFICATE_DATA_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry for which the certificate is being added.

    To get a registry ID make a [RegistryService.List] request.
    """

    certificate_data: typing.Text
    """Public part of the certificate that is being added."""

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        certificate_data: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["certificate_data",b"certificate_data","registry_id",b"registry_id"]) -> None: ...
global___AddRegistryCertificateRequest = AddRegistryCertificateRequest

class AddRegistryCertificateMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    FINGERPRINT_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry certificate that is being added."""

    fingerprint: typing.Text
    """Fingerprint of the certificate that is being added."""

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        fingerprint: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["fingerprint",b"fingerprint","registry_id",b"registry_id"]) -> None: ...
global___AddRegistryCertificateMetadata = AddRegistryCertificateMetadata

class DeleteRegistryCertificateRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    FINGERPRINT_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry to delete a certificate for.

    To get a registry ID make a [RegistryService.List] request.
    """

    fingerprint: typing.Text
    """Fingerprint of the certificate that is being deleted."""

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        fingerprint: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["fingerprint",b"fingerprint","registry_id",b"registry_id"]) -> None: ...
global___DeleteRegistryCertificateRequest = DeleteRegistryCertificateRequest

class DeleteRegistryCertificateMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    FINGERPRINT_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of a registry for which the certificate is being delete."""

    fingerprint: typing.Text
    """Fingerprint of the certificate to deleted."""

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        fingerprint: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["fingerprint",b"fingerprint","registry_id",b"registry_id"]) -> None: ...
global___DeleteRegistryCertificateMetadata = DeleteRegistryCertificateMetadata

class ListRegistryPasswordsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry to list passwords in.

    To get a registry ID make a [RegistryService.List] request.
    """

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["registry_id",b"registry_id"]) -> None: ...
global___ListRegistryPasswordsRequest = ListRegistryPasswordsRequest

class ListRegistryPasswordsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PASSWORDS_FIELD_NUMBER: builtins.int
    @property
    def passwords(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[yandex.cloud.iot.devices.v1.registry_pb2.RegistryPassword]:
        """List of passwords for the specified registry."""
        pass
    def __init__(self,
        *,
        passwords: typing.Optional[typing.Iterable[yandex.cloud.iot.devices.v1.registry_pb2.RegistryPassword]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["passwords",b"passwords"]) -> None: ...
global___ListRegistryPasswordsResponse = ListRegistryPasswordsResponse

class AddRegistryPasswordRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    PASSWORD_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry to add a password for.

    To get a registry ID make a [RegistryService.List] request.
    """

    password: typing.Text
    """Passwords for the registry.

    The password must contain at least three character categories among the following: upper case latin, lower case latin, numbers and special symbols.
    """

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        password: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["password",b"password","registry_id",b"registry_id"]) -> None: ...
global___AddRegistryPasswordRequest = AddRegistryPasswordRequest

class AddRegistryPasswordMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    PASSWORD_ID_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry for which the password is being added."""

    password_id: typing.Text
    """ID of a password that is being added."""

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        password_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["password_id",b"password_id","registry_id",b"registry_id"]) -> None: ...
global___AddRegistryPasswordMetadata = AddRegistryPasswordMetadata

class DeleteRegistryPasswordRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    PASSWORD_ID_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry to delete a password for.

    To get a registry ID make a [DeviceService.List] request.
    """

    password_id: typing.Text
    """ID of the password to delete.

    To get a password ID make a [RegistryService.ListPasswords] request.
    """

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        password_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["password_id",b"password_id","registry_id",b"registry_id"]) -> None: ...
global___DeleteRegistryPasswordRequest = DeleteRegistryPasswordRequest

class DeleteRegistryPasswordMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    PASSWORD_ID_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of a registry for which the password is being delete."""

    password_id: typing.Text
    """ID of the password to delete.

    To get a password ID make a [RegistryService.ListPasswords] request.
    """

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        password_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["password_id",b"password_id","registry_id",b"registry_id"]) -> None: ...
global___DeleteRegistryPasswordMetadata = DeleteRegistryPasswordMetadata

class ListDeviceTopicAliasesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry to list aliases for device topic.

    To get a registry ID make a [RegistryService.List] request.
    """

    page_size: builtins.int
    """The maximum number of results per page that should be returned. If the number of available
    results is larger than `page_size`, the service returns a [ListDeviceTopicAliasesResponse.next_page_token]
    that can be used to get the next page of results in subsequent list requests.
    Default value: 100.
    """

    page_token: typing.Text
    """Page token. To get the next page of results, set `page_token` to the
    [ListDeviceTopicAliasesResponse.next_page_token] returned by a previous list request.
    """

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        page_size: builtins.int = ...,
        page_token: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["page_size",b"page_size","page_token",b"page_token","registry_id",b"registry_id"]) -> None: ...
global___ListDeviceTopicAliasesRequest = ListDeviceTopicAliasesRequest

class ListDeviceTopicAliasesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ALIASES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def aliases(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[yandex.cloud.iot.devices.v1.registry_pb2.DeviceAlias]:
        """List of device aliases for the specified registry."""
        pass
    next_page_token: typing.Text
    """Token for getting the next page of the list. If the number of results is greater than
    the specified [ListDeviceTopicAliasesRequest.page_size], use `next_page_token` as the value
    for the [ListDeviceTopicAliasesRequest.page_token] parameter in the next list request.

    Each subsequent page will have its own `next_page_token` to continue paging through the results.
    """

    def __init__(self,
        *,
        aliases: typing.Optional[typing.Iterable[yandex.cloud.iot.devices.v1.registry_pb2.DeviceAlias]] = ...,
        next_page_token: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["aliases",b"aliases","next_page_token",b"next_page_token"]) -> None: ...
global___ListDeviceTopicAliasesResponse = ListDeviceTopicAliasesResponse

class ListRegistryOperationsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGISTRY_ID_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    FILTER_FIELD_NUMBER: builtins.int
    registry_id: typing.Text
    """ID of the registry to list operations for."""

    page_size: builtins.int
    """The maximum number of results per page that should be returned. If the number of available
    results is larger than `page_size`, the service returns a [ListRegistryOperationsResponse.next_page_token]
    that can be used to get the next page of results in subsequent list requests.
    Default value: 100.
    """

    page_token: typing.Text
    """Page token. To get the next page of results, set `page_token` to the
    [ListRegistryOperationsResponse.next_page_token] returned by a previous list request.
    """

    filter: typing.Text
    """A filter expression that filters resources listed in the response.
    Currently you can use filtering only on [Registry.name] field.
    """

    def __init__(self,
        *,
        registry_id: typing.Text = ...,
        page_size: builtins.int = ...,
        page_token: typing.Text = ...,
        filter: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter",b"filter","page_size",b"page_size","page_token",b"page_token","registry_id",b"registry_id"]) -> None: ...
global___ListRegistryOperationsRequest = ListRegistryOperationsRequest

class ListRegistryOperationsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    OPERATIONS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def operations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[yandex.cloud.operation.operation_pb2.Operation]:
        """List of operations for the specified registry."""
        pass
    next_page_token: typing.Text
    """Token for getting the next page of the list. If the number of results is greater than
    the specified [ListRegistryOperationsRequest.page_size], use `next_page_token` as the value
    for the [ListRegistryOperationsRequest.page_token] parameter in the next list request.

    Each subsequent page will have its own `next_page_token` to continue paging through the results.
    """

    def __init__(self,
        *,
        operations: typing.Optional[typing.Iterable[yandex.cloud.operation.operation_pb2.Operation]] = ...,
        next_page_token: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_page_token",b"next_page_token","operations",b"operations"]) -> None: ...
global___ListRegistryOperationsResponse = ListRegistryOperationsResponse
