"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Disk(google.protobuf.message.Message):
    """A Disk resource. For more information, see [Disks](/docs/compute/concepts/disk)."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _Status:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Disk._Status.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        STATUS_UNSPECIFIED: Disk._Status.ValueType  # 0
        CREATING: Disk._Status.ValueType  # 1
        """Disk is being created."""

        READY: Disk._Status.ValueType  # 2
        """Disk is ready to use."""

        ERROR: Disk._Status.ValueType  # 3
        """Disk encountered a problem and cannot operate."""

        DELETING: Disk._Status.ValueType  # 4
        """Disk is being deleted."""

    class Status(_Status, metaclass=_StatusEnumTypeWrapper):
        pass

    STATUS_UNSPECIFIED: Disk.Status.ValueType  # 0
    CREATING: Disk.Status.ValueType  # 1
    """Disk is being created."""

    READY: Disk.Status.ValueType  # 2
    """Disk is ready to use."""

    ERROR: Disk.Status.ValueType  # 3
    """Disk encountered a problem and cannot operate."""

    DELETING: Disk.Status.ValueType  # 4
    """Disk is being deleted."""


    class LabelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        value: typing.Text
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    FOLDER_ID_FIELD_NUMBER: builtins.int
    CREATED_AT_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    LABELS_FIELD_NUMBER: builtins.int
    TYPE_ID_FIELD_NUMBER: builtins.int
    ZONE_ID_FIELD_NUMBER: builtins.int
    SIZE_FIELD_NUMBER: builtins.int
    BLOCK_SIZE_FIELD_NUMBER: builtins.int
    PRODUCT_IDS_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    SOURCE_IMAGE_ID_FIELD_NUMBER: builtins.int
    SOURCE_SNAPSHOT_ID_FIELD_NUMBER: builtins.int
    INSTANCE_IDS_FIELD_NUMBER: builtins.int
    DISK_PLACEMENT_POLICY_FIELD_NUMBER: builtins.int
    id: typing.Text
    """ID of the disk."""

    folder_id: typing.Text
    """ID of the folder that the disk belongs to."""

    @property
    def created_at(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    name: typing.Text
    """Name of the disk. 1-63 characters long."""

    description: typing.Text
    """Description of the disk. 0-256 characters long."""

    @property
    def labels(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Resource labels as `key:value` pairs. Maximum of 64 per resource."""
        pass
    type_id: typing.Text
    """ID of the disk type."""

    zone_id: typing.Text
    """ID of the availability zone where the disk resides."""

    size: builtins.int
    """Size of the disk, specified in bytes."""

    block_size: builtins.int
    """Block size of the disk, specified in bytes."""

    @property
    def product_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """License IDs that indicate which licenses are attached to this resource.
        License IDs are used to calculate additional charges for the use of the virtual machine.

        The correct license ID is generated by the platform. IDs are inherited by new resources created from this resource.

        If you know the license IDs, specify them when you create the image.
        For example, if you create a disk image using a third-party utility and load it into Object Storage, the license IDs will be lost.
        You can specify them in the [yandex.cloud.compute.v1.ImageService.Create] request.
        """
        pass
    status: global___Disk.Status.ValueType
    """Current status of the disk."""

    source_image_id: typing.Text
    """ID of the image that was used for disk creation."""

    source_snapshot_id: typing.Text
    """ID of the snapshot that was used for disk creation."""

    @property
    def instance_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Array of instances to which the disk is attached."""
        pass
    @property
    def disk_placement_policy(self) -> global___DiskPlacementPolicy:
        """Placement policy configuration."""
        pass
    def __init__(self,
        *,
        id: typing.Text = ...,
        folder_id: typing.Text = ...,
        created_at: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        name: typing.Text = ...,
        description: typing.Text = ...,
        labels: typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        type_id: typing.Text = ...,
        zone_id: typing.Text = ...,
        size: builtins.int = ...,
        block_size: builtins.int = ...,
        product_ids: typing.Optional[typing.Iterable[typing.Text]] = ...,
        status: global___Disk.Status.ValueType = ...,
        source_image_id: typing.Text = ...,
        source_snapshot_id: typing.Text = ...,
        instance_ids: typing.Optional[typing.Iterable[typing.Text]] = ...,
        disk_placement_policy: typing.Optional[global___DiskPlacementPolicy] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["created_at",b"created_at","disk_placement_policy",b"disk_placement_policy","source",b"source","source_image_id",b"source_image_id","source_snapshot_id",b"source_snapshot_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["block_size",b"block_size","created_at",b"created_at","description",b"description","disk_placement_policy",b"disk_placement_policy","folder_id",b"folder_id","id",b"id","instance_ids",b"instance_ids","labels",b"labels","name",b"name","product_ids",b"product_ids","size",b"size","source",b"source","source_image_id",b"source_image_id","source_snapshot_id",b"source_snapshot_id","status",b"status","type_id",b"type_id","zone_id",b"zone_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["source",b"source"]) -> typing.Optional[typing_extensions.Literal["source_image_id","source_snapshot_id"]]: ...
global___Disk = Disk

class DiskPlacementPolicy(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PLACEMENT_GROUP_ID_FIELD_NUMBER: builtins.int
    placement_group_id: typing.Text
    """Placement group ID."""

    def __init__(self,
        *,
        placement_group_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["placement_group_id",b"placement_group_id"]) -> None: ...
global___DiskPlacementPolicy = DiskPlacementPolicy
