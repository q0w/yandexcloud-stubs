"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import typing
import yandex.cloud.mdb.elasticsearch.v1.cluster_pb2
import yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2
import yandex.cloud.operation.operation_pb2

class ClusterServiceStub:
    """A set of methods for managing Elasticsearch clusters."""
    def __init__(self, channel: grpc.Channel) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.GetClusterRequest,
        yandex.cloud.mdb.elasticsearch.v1.cluster_pb2.Cluster]
    """Returns the specified Elasticsearch cluster.

    To get the list of available Elasticsearch clusters, make a [List] request.
    """

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClustersRequest,
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClustersResponse]
    """Retrieves the list of Elasticsearch clusters that belong to the specified folder."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.CreateClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Creates a new Elasticsearch cluster in the specified folder."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.UpdateClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Updates the specified Elasticsearch cluster."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.DeleteClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Deletes the specified Elasticsearch cluster."""

    Move: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.MoveClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Moves the specified Elasticsearch cluster to the specified folder."""

    Start: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.StartClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Starts the specified Elasticsearch cluster."""

    Stop: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.StopClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Stops the specified Elasticsearch cluster."""

    Backup: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.BackupClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Create a backup for the specified ElasticSearch cluster."""

    ListBackups: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterBackupsRequest,
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterBackupsResponse]
    """Returns the list of available backups for the specified Elasticsearch cluster."""

    Restore: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.RestoreClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Creates a new ElasticSearch cluster from the specified backup."""

    ListLogs: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterLogsRequest,
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterLogsResponse]
    """Retrieves logs for the specified Elasticsearch cluster.

    For more information about logs, see the [Logs](/docs/managed-elasticsearch/operations/cluster-logs) section in the documentation.
    """

    StreamLogs: grpc.UnaryStreamMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.StreamClusterLogsRequest,
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.StreamLogRecord]
    """Same as [ListLogs] but using server-side streaming. Also supports `tail -f` semantics."""

    ListOperations: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterOperationsRequest,
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterOperationsResponse]
    """Retrieves the list of operations for the specified Elasticsearch cluster."""

    ListHosts: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterHostsRequest,
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterHostsResponse]
    """Retrieves a list of hosts for the specified Elasticsearch cluster."""

    AddHosts: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.AddClusterHostsRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Adds new hosts to the specified Elasticsearch cluster."""

    DeleteHosts: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.DeleteClusterHostsRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Deletes specified hosts from the specified Elasticsearch cluster."""

    RescheduleMaintenance: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.RescheduleMaintenanceRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Reschedule planned maintenance operation."""


class ClusterServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing Elasticsearch clusters."""
    @abc.abstractmethod
    def Get(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.GetClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.elasticsearch.v1.cluster_pb2.Cluster:
        """Returns the specified Elasticsearch cluster.

        To get the list of available Elasticsearch clusters, make a [List] request.
        """
        pass

    @abc.abstractmethod
    def List(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClustersRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClustersResponse:
        """Retrieves the list of Elasticsearch clusters that belong to the specified folder."""
        pass

    @abc.abstractmethod
    def Create(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.CreateClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Creates a new Elasticsearch cluster in the specified folder."""
        pass

    @abc.abstractmethod
    def Update(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.UpdateClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Updates the specified Elasticsearch cluster."""
        pass

    @abc.abstractmethod
    def Delete(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.DeleteClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Deletes the specified Elasticsearch cluster."""
        pass

    @abc.abstractmethod
    def Move(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.MoveClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Moves the specified Elasticsearch cluster to the specified folder."""
        pass

    @abc.abstractmethod
    def Start(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.StartClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Starts the specified Elasticsearch cluster."""
        pass

    @abc.abstractmethod
    def Stop(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.StopClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Stops the specified Elasticsearch cluster."""
        pass

    @abc.abstractmethod
    def Backup(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.BackupClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Create a backup for the specified ElasticSearch cluster."""
        pass

    @abc.abstractmethod
    def ListBackups(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterBackupsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterBackupsResponse:
        """Returns the list of available backups for the specified Elasticsearch cluster."""
        pass

    @abc.abstractmethod
    def Restore(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.RestoreClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Creates a new ElasticSearch cluster from the specified backup."""
        pass

    @abc.abstractmethod
    def ListLogs(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterLogsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterLogsResponse:
        """Retrieves logs for the specified Elasticsearch cluster.

        For more information about logs, see the [Logs](/docs/managed-elasticsearch/operations/cluster-logs) section in the documentation.
        """
        pass

    @abc.abstractmethod
    def StreamLogs(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.StreamClusterLogsRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.StreamLogRecord]:
        """Same as [ListLogs] but using server-side streaming. Also supports `tail -f` semantics."""
        pass

    @abc.abstractmethod
    def ListOperations(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterOperationsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterOperationsResponse:
        """Retrieves the list of operations for the specified Elasticsearch cluster."""
        pass

    @abc.abstractmethod
    def ListHosts(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterHostsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.ListClusterHostsResponse:
        """Retrieves a list of hosts for the specified Elasticsearch cluster."""
        pass

    @abc.abstractmethod
    def AddHosts(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.AddClusterHostsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Adds new hosts to the specified Elasticsearch cluster."""
        pass

    @abc.abstractmethod
    def DeleteHosts(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.DeleteClusterHostsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Deletes specified hosts from the specified Elasticsearch cluster."""
        pass

    @abc.abstractmethod
    def RescheduleMaintenance(self,
        request: yandex.cloud.mdb.elasticsearch.v1.cluster_service_pb2.RescheduleMaintenanceRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Reschedule planned maintenance operation."""
        pass


def add_ClusterServiceServicer_to_server(servicer: ClusterServiceServicer, server: grpc.Server) -> None: ...
