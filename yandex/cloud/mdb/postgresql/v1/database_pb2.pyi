"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Database(google.protobuf.message.Message):
    """A PostgreSQL Database resource. For more information, see
    the [Developer's Guide](/docs/managed-postgresql/concepts).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    OWNER_FIELD_NUMBER: builtins.int
    LC_COLLATE_FIELD_NUMBER: builtins.int
    LC_CTYPE_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    TEMPLATE_DB_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Name of the database."""

    cluster_id: typing.Text
    """ID of the PostgreSQL cluster that the database belongs to."""

    owner: typing.Text
    """Name of the user assigned as the owner of the database."""

    lc_collate: typing.Text
    """POSIX locale for string sorting order.
    Can only be set at creation time.
    """

    lc_ctype: typing.Text
    """POSIX locale for character classification.
    Can only be set at creation time.
    """

    @property
    def extensions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Extension]:
        """PostgreSQL extensions enabled for the database."""
        pass
    template_db: typing.Text
    """Name of the database template."""

    def __init__(self,
        *,
        name: typing.Text = ...,
        cluster_id: typing.Text = ...,
        owner: typing.Text = ...,
        lc_collate: typing.Text = ...,
        lc_ctype: typing.Text = ...,
        extensions: typing.Optional[typing.Iterable[global___Extension]] = ...,
        template_db: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","extensions",b"extensions","lc_collate",b"lc_collate","lc_ctype",b"lc_ctype","name",b"name","owner",b"owner","template_db",b"template_db"]) -> None: ...
global___Database = Database

class Extension(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Name of the extension, e.g. `pg_trgm` or `pg_btree`.
    Extensions supported by Managed Service for PostgreSQL are [listed in the Developer's Guide](/docs/managed-postgresql/operations/cluster-extensions).
    """

    version: typing.Text
    """Version of the extension."""

    def __init__(self,
        *,
        name: typing.Text = ...,
        version: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","version",b"version"]) -> None: ...
global___Extension = Extension

class DatabaseSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    OWNER_FIELD_NUMBER: builtins.int
    LC_COLLATE_FIELD_NUMBER: builtins.int
    LC_CTYPE_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    TEMPLATE_DB_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Name of the PostgreSQL database. 1-63 characters long."""

    owner: typing.Text
    """Name of the user to be assigned as the owner of the database.
    To get the list of available PostgreSQL users, make a [UserService.List] request.
    """

    lc_collate: typing.Text
    """POSIX locale for string sorting order.
    Can only be set at creation time.
    """

    lc_ctype: typing.Text
    """POSIX locale for character classification.
    Can only be set at creation time.
    """

    @property
    def extensions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Extension]:
        """PostgreSQL extensions to be enabled for the database."""
        pass
    template_db: typing.Text
    """Name of the PostgreSQL database template."""

    def __init__(self,
        *,
        name: typing.Text = ...,
        owner: typing.Text = ...,
        lc_collate: typing.Text = ...,
        lc_ctype: typing.Text = ...,
        extensions: typing.Optional[typing.Iterable[global___Extension]] = ...,
        template_db: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["extensions",b"extensions","lc_collate",b"lc_collate","lc_ctype",b"lc_ctype","name",b"name","owner",b"owner","template_db",b"template_db"]) -> None: ...
global___DatabaseSpec = DatabaseSpec
