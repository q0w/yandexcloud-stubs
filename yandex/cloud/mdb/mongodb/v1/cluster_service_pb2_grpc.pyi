"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import typing
import yandex.cloud.mdb.mongodb.v1.cluster_pb2
import yandex.cloud.mdb.mongodb.v1.cluster_service_pb2
import yandex.cloud.operation.operation_pb2

class ClusterServiceStub:
    """A set of methods for managing MongoDB Cluster resources."""
    def __init__(self, channel: grpc.Channel) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.GetClusterRequest,
        yandex.cloud.mdb.mongodb.v1.cluster_pb2.Cluster]
    """Returns the specified MongoDB Cluster resource.

    To get the list of available MongoDB Cluster resources, make a [List] request.
    """

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClustersRequest,
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClustersResponse]
    """Retrieves the list of MongoDB Cluster resources that belong
    to the specified folder.
    """

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.CreateClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Creates a MongoDB cluster in the specified folder."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.UpdateClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Updates the specified MongoDB cluster."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.DeleteClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Deletes the specified MongoDB cluster."""

    Start: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.StartClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Start the specified MongoDB cluster."""

    Stop: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.StopClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Stop the specified MongoDB cluster."""

    Move: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.MoveClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Moves the specified MongoDB cluster to the specified folder."""

    Backup: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.BackupClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Creates a backup for the specified MongoDB cluster."""

    Restore: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.RestoreClusterRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Creates a new MongoDB cluster using the specified backup."""

    RescheduleMaintenance: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.RescheduleMaintenanceRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Reschedules planned maintenance operation."""

    ListLogs: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterLogsRequest,
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterLogsResponse]
    """Retrieves logs for the specified MongoDB cluster."""

    StreamLogs: grpc.UnaryStreamMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.StreamClusterLogsRequest,
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.StreamLogRecord]
    """Same as ListLogs but using server-side streaming. Also allows for 'tail -f' semantics."""

    ListOperations: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterOperationsRequest,
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterOperationsResponse]
    """Retrieves the list of Operation resources for the specified cluster."""

    ListBackups: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterBackupsRequest,
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterBackupsResponse]
    """Retrieves the list of available backups for the specified MongoDB cluster."""

    ListHosts: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterHostsRequest,
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterHostsResponse]
    """Retrieves a list of hosts for the specified cluster."""

    AddHosts: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.AddClusterHostsRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Creates new hosts for a cluster."""

    DeleteHosts: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.DeleteClusterHostsRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Deletes the specified hosts for a cluster."""

    EnableSharding: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.EnableClusterShardingRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Enables sharding for the cluster: creates 3 mongoinfra (or 3 mongocfg and 2 mongos) hosts
    that would support adding and using shards in the cluster.
    """

    GetShard: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.GetClusterShardRequest,
        yandex.cloud.mdb.mongodb.v1.cluster_pb2.Shard]
    """Returns the specified shard."""

    ListShards: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterShardsRequest,
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterShardsResponse]
    """Retrieves a list of shards."""

    AddShard: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.AddClusterShardRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Creates a new shard."""

    DeleteShard: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.DeleteClusterShardRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Deletes the specified shard."""

    ResetupHosts: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ResetupHostsRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Resetups hosts."""

    RestartHosts: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.RestartHostsRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Restarts hosts."""

    StepdownHosts: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.StepdownHostsRequest,
        yandex.cloud.operation.operation_pb2.Operation]
    """Stepdown hosts."""


class ClusterServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing MongoDB Cluster resources."""
    @abc.abstractmethod
    def Get(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.GetClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.mongodb.v1.cluster_pb2.Cluster:
        """Returns the specified MongoDB Cluster resource.

        To get the list of available MongoDB Cluster resources, make a [List] request.
        """
        pass

    @abc.abstractmethod
    def List(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClustersRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClustersResponse:
        """Retrieves the list of MongoDB Cluster resources that belong
        to the specified folder.
        """
        pass

    @abc.abstractmethod
    def Create(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.CreateClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Creates a MongoDB cluster in the specified folder."""
        pass

    @abc.abstractmethod
    def Update(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.UpdateClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Updates the specified MongoDB cluster."""
        pass

    @abc.abstractmethod
    def Delete(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.DeleteClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Deletes the specified MongoDB cluster."""
        pass

    @abc.abstractmethod
    def Start(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.StartClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Start the specified MongoDB cluster."""
        pass

    @abc.abstractmethod
    def Stop(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.StopClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Stop the specified MongoDB cluster."""
        pass

    @abc.abstractmethod
    def Move(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.MoveClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Moves the specified MongoDB cluster to the specified folder."""
        pass

    @abc.abstractmethod
    def Backup(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.BackupClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Creates a backup for the specified MongoDB cluster."""
        pass

    @abc.abstractmethod
    def Restore(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.RestoreClusterRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Creates a new MongoDB cluster using the specified backup."""
        pass

    @abc.abstractmethod
    def RescheduleMaintenance(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.RescheduleMaintenanceRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Reschedules planned maintenance operation."""
        pass

    @abc.abstractmethod
    def ListLogs(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterLogsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterLogsResponse:
        """Retrieves logs for the specified MongoDB cluster."""
        pass

    @abc.abstractmethod
    def StreamLogs(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.StreamClusterLogsRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.StreamLogRecord]:
        """Same as ListLogs but using server-side streaming. Also allows for 'tail -f' semantics."""
        pass

    @abc.abstractmethod
    def ListOperations(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterOperationsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterOperationsResponse:
        """Retrieves the list of Operation resources for the specified cluster."""
        pass

    @abc.abstractmethod
    def ListBackups(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterBackupsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterBackupsResponse:
        """Retrieves the list of available backups for the specified MongoDB cluster."""
        pass

    @abc.abstractmethod
    def ListHosts(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterHostsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterHostsResponse:
        """Retrieves a list of hosts for the specified cluster."""
        pass

    @abc.abstractmethod
    def AddHosts(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.AddClusterHostsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Creates new hosts for a cluster."""
        pass

    @abc.abstractmethod
    def DeleteHosts(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.DeleteClusterHostsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Deletes the specified hosts for a cluster."""
        pass

    @abc.abstractmethod
    def EnableSharding(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.EnableClusterShardingRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Enables sharding for the cluster: creates 3 mongoinfra (or 3 mongocfg and 2 mongos) hosts
        that would support adding and using shards in the cluster.
        """
        pass

    @abc.abstractmethod
    def GetShard(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.GetClusterShardRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.mongodb.v1.cluster_pb2.Shard:
        """Returns the specified shard."""
        pass

    @abc.abstractmethod
    def ListShards(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterShardsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ListClusterShardsResponse:
        """Retrieves a list of shards."""
        pass

    @abc.abstractmethod
    def AddShard(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.AddClusterShardRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Creates a new shard."""
        pass

    @abc.abstractmethod
    def DeleteShard(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.DeleteClusterShardRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Deletes the specified shard."""
        pass

    @abc.abstractmethod
    def ResetupHosts(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.ResetupHostsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Resetups hosts."""
        pass

    @abc.abstractmethod
    def RestartHosts(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.RestartHostsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Restarts hosts."""
        pass

    @abc.abstractmethod
    def StepdownHosts(self,
        request: yandex.cloud.mdb.mongodb.v1.cluster_service_pb2.StepdownHostsRequest,
        context: grpc.ServicerContext,
    ) -> yandex.cloud.operation.operation_pb2.Operation:
        """Stepdown hosts."""
        pass


def add_ClusterServiceServicer_to_server(servicer: ClusterServiceServicer, server: grpc.Server) -> None: ...
