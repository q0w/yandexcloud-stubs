"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _LogStatement:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _LogStatementEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_LogStatement.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    LOG_STATEMENT_UNSPECIFIED: _LogStatement.ValueType  # 0
    NONE: _LogStatement.ValueType  # 1
    """None statements are logged."""

    DDL: _LogStatement.ValueType  # 2
    """Logs all data definition commands like `CREATE`, `ALTER`, and `DROP`. Default value."""

    MOD: _LogStatement.ValueType  # 3
    """Logs all `DDL` statements, plus `INSERT`, `UPDATE`, `DELETE`, `TRUNCATE`, and `COPY FROM`."""

    ALL: _LogStatement.ValueType  # 4
    """Logs all statements."""

class LogStatement(_LogStatement, metaclass=_LogStatementEnumTypeWrapper):
    pass

LOG_STATEMENT_UNSPECIFIED: LogStatement.ValueType  # 0
NONE: LogStatement.ValueType  # 1
"""None statements are logged."""

DDL: LogStatement.ValueType  # 2
"""Logs all data definition commands like `CREATE`, `ALTER`, and `DROP`. Default value."""

MOD: LogStatement.ValueType  # 3
"""Logs all `DDL` statements, plus `INSERT`, `UPDATE`, `DELETE`, `TRUNCATE`, and `COPY FROM`."""

ALL: LogStatement.ValueType  # 4
"""Logs all statements."""

global___LogStatement = LogStatement


class Resources(google.protobuf.message.Message):
    """A list of computational resources allocated to a host.

    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    RESOURCE_PRESET_ID_FIELD_NUMBER: builtins.int
    DISK_SIZE_FIELD_NUMBER: builtins.int
    DISK_TYPE_ID_FIELD_NUMBER: builtins.int
    resource_preset_id: typing.Text
    """ID of the preset for computational resources allocated to a host.

    Available presets are listed in the [documentation](/docs/managed-greenplum/concepts/instance-types).
    """

    disk_size: builtins.int
    """Volume of the storage used by the host, in bytes."""

    disk_type_id: typing.Text
    """Type of the storage used by the host: `network-hdd`, `network-ssd` or `local-ssd`."""

    def __init__(self,
        *,
        resource_preset_id: typing.Text = ...,
        disk_size: builtins.int = ...,
        disk_type_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["disk_size",b"disk_size","disk_type_id",b"disk_type_id","resource_preset_id",b"resource_preset_id"]) -> None: ...
global___Resources = Resources

class ConnectionPoolerConfig(google.protobuf.message.Message):
    """Route server configuration.

    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _PoolMode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _PoolModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[ConnectionPoolerConfig._PoolMode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        POOL_MODE_UNSPECIFIED: ConnectionPoolerConfig._PoolMode.ValueType  # 0
        SESSION: ConnectionPoolerConfig._PoolMode.ValueType  # 1
        """Assign server connection to a client until it disconnects. Default value."""

        TRANSACTION: ConnectionPoolerConfig._PoolMode.ValueType  # 2
        """Assign server connection to a client for a transaction processing."""

    class PoolMode(_PoolMode, metaclass=_PoolModeEnumTypeWrapper):
        """Route server pool mode.

        """
        pass

    POOL_MODE_UNSPECIFIED: ConnectionPoolerConfig.PoolMode.ValueType  # 0
    SESSION: ConnectionPoolerConfig.PoolMode.ValueType  # 1
    """Assign server connection to a client until it disconnects. Default value."""

    TRANSACTION: ConnectionPoolerConfig.PoolMode.ValueType  # 2
    """Assign server connection to a client for a transaction processing."""


    MODE_FIELD_NUMBER: builtins.int
    SIZE_FIELD_NUMBER: builtins.int
    CLIENT_IDLE_TIMEOUT_FIELD_NUMBER: builtins.int
    mode: global___ConnectionPoolerConfig.PoolMode.ValueType
    """Route server pool mode."""

    @property
    def size(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The number of servers in the server pool. Clients are placed in a wait queue when all servers are busy.

        Set to zero to disable the limit.
        """
        pass
    @property
    def client_idle_timeout(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Server pool idle timeout, in seconds.

        A server connection closes after being idle for the specified time.

        Set to zero to disable the limit.
        """
        pass
    def __init__(self,
        *,
        mode: global___ConnectionPoolerConfig.PoolMode.ValueType = ...,
        size: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        client_idle_timeout: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["client_idle_timeout",b"client_idle_timeout","size",b"size"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["client_idle_timeout",b"client_idle_timeout","mode",b"mode","size",b"size"]) -> None: ...
global___ConnectionPoolerConfig = ConnectionPoolerConfig

class MasterSubclusterConfig(google.protobuf.message.Message):
    """Configuration of the master subcluster.

    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    RESOURCES_FIELD_NUMBER: builtins.int
    @property
    def resources(self) -> global___Resources:
        """Computational resources allocated to Greenplum® master subcluster hosts."""
        pass
    def __init__(self,
        *,
        resources: typing.Optional[global___Resources] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["resources",b"resources"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["resources",b"resources"]) -> None: ...
global___MasterSubclusterConfig = MasterSubclusterConfig

class SegmentSubclusterConfig(google.protobuf.message.Message):
    """Configuration of the segment subcluster.

    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    RESOURCES_FIELD_NUMBER: builtins.int
    @property
    def resources(self) -> global___Resources:
        """Computational resources allocated to Greenplum® segment subcluster hosts."""
        pass
    def __init__(self,
        *,
        resources: typing.Optional[global___Resources] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["resources",b"resources"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["resources",b"resources"]) -> None: ...
global___SegmentSubclusterConfig = SegmentSubclusterConfig

class GreenplumConfig6_17(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MAX_CONNECTIONS_FIELD_NUMBER: builtins.int
    MAX_SLOT_WAL_KEEP_SIZE_FIELD_NUMBER: builtins.int
    GP_WORKFILE_LIMIT_PER_SEGMENT_FIELD_NUMBER: builtins.int
    GP_WORKFILE_LIMIT_PER_QUERY_FIELD_NUMBER: builtins.int
    GP_WORKFILE_LIMIT_FILES_PER_QUERY_FIELD_NUMBER: builtins.int
    MAX_PREPARED_TRANSACTIONS_FIELD_NUMBER: builtins.int
    GP_WORKFILE_COMPRESSION_FIELD_NUMBER: builtins.int
    @property
    def max_connections(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Maximum number of inbound connections on master segment."""
        pass
    @property
    def max_slot_wal_keep_size(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum size of WAL files that replication slots are allowed to retain in the `pg_wal` directory at checkpoint time.

        More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/current/runtime-config-replication.html).
        """
        pass
    @property
    def gp_workfile_limit_per_segment(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.

        The default value is 0 (no limit).

        More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_segment).
        """
        pass
    @property
    def gp_workfile_limit_per_query(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum disk size that an individual query is allowed to use for creating temporary spill files at each segment.

        The default value is 0 (no limit).

        More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_query).
        """
        pass
    @property
    def gp_workfile_limit_files_per_query(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum number of temporary spill files allowed per query at each segment.

        Spill files, also known as workfiles, are created when a query requires more memory than there is allocated.

        The current query is terminated if the limit is exceeded.

        Set to zero to disable the limit.

        Master session reloads if the parameter changes.

        Default value is 10000.

        More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_files_per_query).
        """
        pass
    @property
    def max_prepared_transactions(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum number of transactions that can be in the `prepared` state simultaneously.

        More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/9.6/runtime-config-resource.html).
        """
        pass
    @property
    def gp_workfile_compression(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Whether the spill files are compressed or not.

        More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_compression).
        """
        pass
    def __init__(self,
        *,
        max_connections: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_slot_wal_keep_size: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        gp_workfile_limit_per_segment: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        gp_workfile_limit_per_query: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        gp_workfile_limit_files_per_query: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_prepared_transactions: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        gp_workfile_compression: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["gp_workfile_compression",b"gp_workfile_compression","gp_workfile_limit_files_per_query",b"gp_workfile_limit_files_per_query","gp_workfile_limit_per_query",b"gp_workfile_limit_per_query","gp_workfile_limit_per_segment",b"gp_workfile_limit_per_segment","max_connections",b"max_connections","max_prepared_transactions",b"max_prepared_transactions","max_slot_wal_keep_size",b"max_slot_wal_keep_size"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["gp_workfile_compression",b"gp_workfile_compression","gp_workfile_limit_files_per_query",b"gp_workfile_limit_files_per_query","gp_workfile_limit_per_query",b"gp_workfile_limit_per_query","gp_workfile_limit_per_segment",b"gp_workfile_limit_per_segment","max_connections",b"max_connections","max_prepared_transactions",b"max_prepared_transactions","max_slot_wal_keep_size",b"max_slot_wal_keep_size"]) -> None: ...
global___GreenplumConfig6_17 = GreenplumConfig6_17

class GreenplumConfig6_19(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MAX_CONNECTIONS_FIELD_NUMBER: builtins.int
    MAX_SLOT_WAL_KEEP_SIZE_FIELD_NUMBER: builtins.int
    GP_WORKFILE_LIMIT_PER_SEGMENT_FIELD_NUMBER: builtins.int
    GP_WORKFILE_LIMIT_PER_QUERY_FIELD_NUMBER: builtins.int
    GP_WORKFILE_LIMIT_FILES_PER_QUERY_FIELD_NUMBER: builtins.int
    MAX_PREPARED_TRANSACTIONS_FIELD_NUMBER: builtins.int
    GP_WORKFILE_COMPRESSION_FIELD_NUMBER: builtins.int
    MAX_STATEMENT_MEM_FIELD_NUMBER: builtins.int
    LOG_STATEMENT_FIELD_NUMBER: builtins.int
    @property
    def max_connections(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Maximum number of inbound connections on master segment."""
        pass
    @property
    def max_slot_wal_keep_size(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum size of WAL files that replication slots are allowed to retain in the `pg_wal` directory at checkpoint time.

        More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/current/runtime-config-replication.html).
        """
        pass
    @property
    def gp_workfile_limit_per_segment(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.

        The default value is 0 (no limit).

        More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_segment).
        """
        pass
    @property
    def gp_workfile_limit_per_query(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum disk size that an individual query is allowed to use for creating temporary spill files at each segment.

        The default value is 0 (no limit).

        More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_query).
        """
        pass
    @property
    def gp_workfile_limit_files_per_query(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum number of temporary spill files allowed per query at each segment.

        Spill files, also known as workfiles, are created when a query requires more memory than there is allocated.

        The current query is terminated if the limit is exceeded.

        Set to zero to disable the limit.

        Master session reloads if the parameter changes.

        Default value is 10000.

        More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_files_per_query).
        """
        pass
    @property
    def max_prepared_transactions(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum number of transactions that can be in the `prepared` state simultaneously.

        More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/9.6/runtime-config-resource.html).
        """
        pass
    @property
    def gp_workfile_compression(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Whether the spill files are compressed or not.

        More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_compression).
        """
        pass
    @property
    def max_statement_mem(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum memory limit for a query, in bytes.

        Helps to avoid out-of-memory errors on a segment host during query processing as a result of setting `statement_mem` too high.

        Taking into account the configuration of a single segment host, calculate [max_statement_mem] as follows: `seghost_physical_memory` / `average_number_concurrent_queries`.

        When changing both [max_statement_mem] and `statement_mem`, [max_statement_mem] must be changed first, or listed first in the `postgresql.conf` file.

        Default value is 2097152000 (2000 MB).

        More info in [Greenplum® documentation](https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem).
        in bytes
        """
        pass
    log_statement: global___LogStatement.ValueType
    """Logged SQL statements.

    `PREPARE` and `EXPLAIN ANALYZE` statements are also logged if their contained command belongs to an appropriate type.

    More info in [Greenplum® documentation](https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#log_statement).
    """

    def __init__(self,
        *,
        max_connections: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_slot_wal_keep_size: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        gp_workfile_limit_per_segment: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        gp_workfile_limit_per_query: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        gp_workfile_limit_files_per_query: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_prepared_transactions: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        gp_workfile_compression: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        max_statement_mem: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        log_statement: global___LogStatement.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["gp_workfile_compression",b"gp_workfile_compression","gp_workfile_limit_files_per_query",b"gp_workfile_limit_files_per_query","gp_workfile_limit_per_query",b"gp_workfile_limit_per_query","gp_workfile_limit_per_segment",b"gp_workfile_limit_per_segment","max_connections",b"max_connections","max_prepared_transactions",b"max_prepared_transactions","max_slot_wal_keep_size",b"max_slot_wal_keep_size","max_statement_mem",b"max_statement_mem"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["gp_workfile_compression",b"gp_workfile_compression","gp_workfile_limit_files_per_query",b"gp_workfile_limit_files_per_query","gp_workfile_limit_per_query",b"gp_workfile_limit_per_query","gp_workfile_limit_per_segment",b"gp_workfile_limit_per_segment","log_statement",b"log_statement","max_connections",b"max_connections","max_prepared_transactions",b"max_prepared_transactions","max_slot_wal_keep_size",b"max_slot_wal_keep_size","max_statement_mem",b"max_statement_mem"]) -> None: ...
global___GreenplumConfig6_19 = GreenplumConfig6_19

class GreenplumConfigSet6_17(google.protobuf.message.Message):
    """Configuration settings version 6.17"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    EFFECTIVE_CONFIG_FIELD_NUMBER: builtins.int
    USER_CONFIG_FIELD_NUMBER: builtins.int
    DEFAULT_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def effective_config(self) -> global___GreenplumConfig6_17:
        """Effective settings for a Greenplum® cluster (a combination of settings defined in [GreenplumConfigSet6_17.user_config] and [GreenplumConfigSet6_17.default_config])."""
        pass
    @property
    def user_config(self) -> global___GreenplumConfig6_17:
        """User-defined settings for a Greenplum® cluster."""
        pass
    @property
    def default_config(self) -> global___GreenplumConfig6_17:
        """Default configuration for a Greenplum® cluster."""
        pass
    def __init__(self,
        *,
        effective_config: typing.Optional[global___GreenplumConfig6_17] = ...,
        user_config: typing.Optional[global___GreenplumConfig6_17] = ...,
        default_config: typing.Optional[global___GreenplumConfig6_17] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["default_config",b"default_config","effective_config",b"effective_config","user_config",b"user_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["default_config",b"default_config","effective_config",b"effective_config","user_config",b"user_config"]) -> None: ...
global___GreenplumConfigSet6_17 = GreenplumConfigSet6_17

class GreenplumConfigSet6_19(google.protobuf.message.Message):
    """Configuration settings version 6.19"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    EFFECTIVE_CONFIG_FIELD_NUMBER: builtins.int
    USER_CONFIG_FIELD_NUMBER: builtins.int
    DEFAULT_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def effective_config(self) -> global___GreenplumConfig6_19:
        """Effective settings for a Greenplum® cluster (a combination of settings defined in [GreenplumConfigSet6_19.user_config] and [GreenplumConfigSet6_19.default_config])."""
        pass
    @property
    def user_config(self) -> global___GreenplumConfig6_19:
        """User-defined settings for a Greenplum® cluster."""
        pass
    @property
    def default_config(self) -> global___GreenplumConfig6_19:
        """Default configuration for a Greenplum® cluster."""
        pass
    def __init__(self,
        *,
        effective_config: typing.Optional[global___GreenplumConfig6_19] = ...,
        user_config: typing.Optional[global___GreenplumConfig6_19] = ...,
        default_config: typing.Optional[global___GreenplumConfig6_19] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["default_config",b"default_config","effective_config",b"effective_config","user_config",b"user_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["default_config",b"default_config","effective_config",b"effective_config","user_config",b"user_config"]) -> None: ...
global___GreenplumConfigSet6_19 = GreenplumConfigSet6_19

class ConnectionPoolerConfigSet(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    EFFECTIVE_CONFIG_FIELD_NUMBER: builtins.int
    USER_CONFIG_FIELD_NUMBER: builtins.int
    DEFAULT_CONFIG_FIELD_NUMBER: builtins.int
    @property
    def effective_config(self) -> global___ConnectionPoolerConfig:
        """Effective settings for an Odyssey® pooler (a combination of settings defined in [ConnectionPoolerConfigSet.user_config] and [ConnectionPoolerConfigSet.default_config])."""
        pass
    @property
    def user_config(self) -> global___ConnectionPoolerConfig:
        """User-defined settings for an Odyssey® pooler."""
        pass
    @property
    def default_config(self) -> global___ConnectionPoolerConfig:
        """Default configuration for an Odyssey® pooler."""
        pass
    def __init__(self,
        *,
        effective_config: typing.Optional[global___ConnectionPoolerConfig] = ...,
        user_config: typing.Optional[global___ConnectionPoolerConfig] = ...,
        default_config: typing.Optional[global___ConnectionPoolerConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["default_config",b"default_config","effective_config",b"effective_config","user_config",b"user_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["default_config",b"default_config","effective_config",b"effective_config","user_config",b"user_config"]) -> None: ...
global___ConnectionPoolerConfigSet = ConnectionPoolerConfigSet
