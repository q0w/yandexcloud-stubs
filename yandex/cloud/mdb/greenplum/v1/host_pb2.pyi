"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions
import yandex.cloud.mdb.greenplum.v1.config_pb2

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Host(google.protobuf.message.Message):
    """A Greenplum® cluster host resource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _Type:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _TypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Host._Type.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        TYPE_UNSPECIFIED: Host._Type.ValueType  # 0
        """The type is not specified."""

        MASTER: Host._Type.ValueType  # 1
        """A Greenplum® master host."""

        REPLICA: Host._Type.ValueType  # 2
        """A Greenplum® master replica host."""

        SEGMENT: Host._Type.ValueType  # 3
        """A Greenplum® segment host."""

    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        pass

    TYPE_UNSPECIFIED: Host.Type.ValueType  # 0
    """The type is not specified."""

    MASTER: Host.Type.ValueType  # 1
    """A Greenplum® master host."""

    REPLICA: Host.Type.ValueType  # 2
    """A Greenplum® master replica host."""

    SEGMENT: Host.Type.ValueType  # 3
    """A Greenplum® segment host."""


    class _Health:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _HealthEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Host._Health.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: Host._Health.ValueType  # 0
        """Health of the host is unknown."""

        ALIVE: Host._Health.ValueType  # 1
        """The host is performing all its functions normally."""

        DEAD: Host._Health.ValueType  # 2
        """The host is inoperable and cannot perform any of its essential functions."""

        DEGRADED: Host._Health.ValueType  # 3
        """The host is working below capacity or not fully functional."""

        UNBALANCED: Host._Health.ValueType  # 4
        """One or more segments are not in preferred role."""

    class Health(_Health, metaclass=_HealthEnumTypeWrapper):
        pass

    UNKNOWN: Host.Health.ValueType  # 0
    """Health of the host is unknown."""

    ALIVE: Host.Health.ValueType  # 1
    """The host is performing all its functions normally."""

    DEAD: Host.Health.ValueType  # 2
    """The host is inoperable and cannot perform any of its essential functions."""

    DEGRADED: Host.Health.ValueType  # 3
    """The host is working below capacity or not fully functional."""

    UNBALANCED: Host.Health.ValueType  # 4
    """One or more segments are not in preferred role."""


    NAME_FIELD_NUMBER: builtins.int
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    ZONE_ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    RESOURCES_FIELD_NUMBER: builtins.int
    HEALTH_FIELD_NUMBER: builtins.int
    SUBNET_ID_FIELD_NUMBER: builtins.int
    ASSIGN_PUBLIC_IP_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Name of the Greenplum® host. The host name is assigned by the platform at creation time and cannot be changed.
    1-63 characters long.

    The name is unique across all MDB hosts that exist on the platform, as it defines the FQDN of the host.
    """

    cluster_id: typing.Text
    """ID of the Greenplum® cluster. The ID is assigned by the platform at creation time."""

    zone_id: typing.Text
    """ID of the availability zone the Greenplum® host belongs to."""

    type: global___Host.Type.ValueType
    """Type of the host."""

    @property
    def resources(self) -> yandex.cloud.mdb.greenplum.v1.config_pb2.Resources:
        """Resources allocated to the Greenplum® host."""
        pass
    health: global___Host.Health.ValueType
    """Status code of the aggregated health of the host."""

    subnet_id: typing.Text
    """ID of the subnet that the host belongs to."""

    assign_public_ip: builtins.bool
    """Whether or not a public IP is assigned to the host."""

    def __init__(self,
        *,
        name: typing.Text = ...,
        cluster_id: typing.Text = ...,
        zone_id: typing.Text = ...,
        type: global___Host.Type.ValueType = ...,
        resources: typing.Optional[yandex.cloud.mdb.greenplum.v1.config_pb2.Resources] = ...,
        health: global___Host.Health.ValueType = ...,
        subnet_id: typing.Text = ...,
        assign_public_ip: builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["resources",b"resources"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["assign_public_ip",b"assign_public_ip","cluster_id",b"cluster_id","health",b"health","name",b"name","resources",b"resources","subnet_id",b"subnet_id","type",b"type","zone_id",b"zone_id"]) -> None: ...
global___Host = Host
