"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class User(google.protobuf.message.Message):
    """A ClickHouse User resource. For more information, see 
    the [Developer's guide](/docs/managed-clickhouse/concepts).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    PERMISSIONS_FIELD_NUMBER: builtins.int
    SETTINGS_FIELD_NUMBER: builtins.int
    QUOTAS_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Name of the ClickHouse user."""

    cluster_id: typing.Text
    """ID of the ClickHouse cluster the user belongs to."""

    @property
    def permissions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Permission]:
        """Set of permissions granted to the user."""
        pass
    @property
    def settings(self) -> global___UserSettings: ...
    @property
    def quotas(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___UserQuota]:
        """Set of quotas assigned to the user."""
        pass
    def __init__(self,
        *,
        name: typing.Text = ...,
        cluster_id: typing.Text = ...,
        permissions: typing.Optional[typing.Iterable[global___Permission]] = ...,
        settings: typing.Optional[global___UserSettings] = ...,
        quotas: typing.Optional[typing.Iterable[global___UserQuota]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["settings",b"settings"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","name",b"name","permissions",b"permissions","quotas",b"quotas","settings",b"settings"]) -> None: ...
global___User = User

class Permission(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DATABASE_NAME_FIELD_NUMBER: builtins.int
    database_name: typing.Text
    """Name of the database that the permission grants access to."""

    def __init__(self,
        *,
        database_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["database_name",b"database_name"]) -> None: ...
global___Permission = Permission

class UserSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    PASSWORD_FIELD_NUMBER: builtins.int
    PERMISSIONS_FIELD_NUMBER: builtins.int
    SETTINGS_FIELD_NUMBER: builtins.int
    QUOTAS_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Name of the ClickHouse user."""

    password: typing.Text
    """Password of the ClickHouse user."""

    @property
    def permissions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Permission]:
        """Set of permissions to grant to the user. If not set, it's granted permissions to access all databases."""
        pass
    @property
    def settings(self) -> global___UserSettings: ...
    @property
    def quotas(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___UserQuota]:
        """Set of quotas assigned to the user."""
        pass
    def __init__(self,
        *,
        name: typing.Text = ...,
        password: typing.Text = ...,
        permissions: typing.Optional[typing.Iterable[global___Permission]] = ...,
        settings: typing.Optional[global___UserSettings] = ...,
        quotas: typing.Optional[typing.Iterable[global___UserQuota]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["settings",b"settings"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["name",b"name","password",b"password","permissions",b"permissions","quotas",b"quotas","settings",b"settings"]) -> None: ...
global___UserSpec = UserSpec

class UserSettings(google.protobuf.message.Message):
    """ClickHouse user settings. Supported settings are a limited subset of all settings
    described in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _OverflowMode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _OverflowModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[UserSettings._OverflowMode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        OVERFLOW_MODE_UNSPECIFIED: UserSettings._OverflowMode.ValueType  # 0
        OVERFLOW_MODE_THROW: UserSettings._OverflowMode.ValueType  # 1
        OVERFLOW_MODE_BREAK: UserSettings._OverflowMode.ValueType  # 2
    class OverflowMode(_OverflowMode, metaclass=_OverflowModeEnumTypeWrapper):
        pass

    OVERFLOW_MODE_UNSPECIFIED: UserSettings.OverflowMode.ValueType  # 0
    OVERFLOW_MODE_THROW: UserSettings.OverflowMode.ValueType  # 1
    OVERFLOW_MODE_BREAK: UserSettings.OverflowMode.ValueType  # 2

    class _GroupByOverflowMode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _GroupByOverflowModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[UserSettings._GroupByOverflowMode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        GROUP_BY_OVERFLOW_MODE_UNSPECIFIED: UserSettings._GroupByOverflowMode.ValueType  # 0
        GROUP_BY_OVERFLOW_MODE_THROW: UserSettings._GroupByOverflowMode.ValueType  # 1
        GROUP_BY_OVERFLOW_MODE_BREAK: UserSettings._GroupByOverflowMode.ValueType  # 2
        GROUP_BY_OVERFLOW_MODE_ANY: UserSettings._GroupByOverflowMode.ValueType  # 3
    class GroupByOverflowMode(_GroupByOverflowMode, metaclass=_GroupByOverflowModeEnumTypeWrapper):
        pass

    GROUP_BY_OVERFLOW_MODE_UNSPECIFIED: UserSettings.GroupByOverflowMode.ValueType  # 0
    GROUP_BY_OVERFLOW_MODE_THROW: UserSettings.GroupByOverflowMode.ValueType  # 1
    GROUP_BY_OVERFLOW_MODE_BREAK: UserSettings.GroupByOverflowMode.ValueType  # 2
    GROUP_BY_OVERFLOW_MODE_ANY: UserSettings.GroupByOverflowMode.ValueType  # 3

    class _DistributedProductMode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _DistributedProductModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[UserSettings._DistributedProductMode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED: UserSettings._DistributedProductMode.ValueType  # 0
        DISTRIBUTED_PRODUCT_MODE_DENY: UserSettings._DistributedProductMode.ValueType  # 1
        """Default value. Prohibits using these types of subqueries (returns the "Double-distributed in/JOIN subqueries is denied" exception)."""

        DISTRIBUTED_PRODUCT_MODE_LOCAL: UserSettings._DistributedProductMode.ValueType  # 2
        """Replaces the database and table in the subquery with local ones for the destination server (shard), leaving the normal IN/JOIN."""

        DISTRIBUTED_PRODUCT_MODE_GLOBAL: UserSettings._DistributedProductMode.ValueType  # 3
        """Replaces the IN/JOIN query with GLOBAL IN/GLOBAL JOIN."""

        DISTRIBUTED_PRODUCT_MODE_ALLOW: UserSettings._DistributedProductMode.ValueType  # 4
        """Allows the use of these types of subqueries."""

    class DistributedProductMode(_DistributedProductMode, metaclass=_DistributedProductModeEnumTypeWrapper):
        pass

    DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED: UserSettings.DistributedProductMode.ValueType  # 0
    DISTRIBUTED_PRODUCT_MODE_DENY: UserSettings.DistributedProductMode.ValueType  # 1
    """Default value. Prohibits using these types of subqueries (returns the "Double-distributed in/JOIN subqueries is denied" exception)."""

    DISTRIBUTED_PRODUCT_MODE_LOCAL: UserSettings.DistributedProductMode.ValueType  # 2
    """Replaces the database and table in the subquery with local ones for the destination server (shard), leaving the normal IN/JOIN."""

    DISTRIBUTED_PRODUCT_MODE_GLOBAL: UserSettings.DistributedProductMode.ValueType  # 3
    """Replaces the IN/JOIN query with GLOBAL IN/GLOBAL JOIN."""

    DISTRIBUTED_PRODUCT_MODE_ALLOW: UserSettings.DistributedProductMode.ValueType  # 4
    """Allows the use of these types of subqueries."""


    class _QuotaMode:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _QuotaModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[UserSettings._QuotaMode.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        QUOTA_MODE_UNSPECIFIED: UserSettings._QuotaMode.ValueType  # 0
        QUOTA_MODE_DEFAULT: UserSettings._QuotaMode.ValueType  # 1
        QUOTA_MODE_KEYED: UserSettings._QuotaMode.ValueType  # 2
        QUOTA_MODE_KEYED_BY_IP: UserSettings._QuotaMode.ValueType  # 3
    class QuotaMode(_QuotaMode, metaclass=_QuotaModeEnumTypeWrapper):
        pass

    QUOTA_MODE_UNSPECIFIED: UserSettings.QuotaMode.ValueType  # 0
    QUOTA_MODE_DEFAULT: UserSettings.QuotaMode.ValueType  # 1
    QUOTA_MODE_KEYED: UserSettings.QuotaMode.ValueType  # 2
    QUOTA_MODE_KEYED_BY_IP: UserSettings.QuotaMode.ValueType  # 3

    class _CountDistinctImplementation:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _CountDistinctImplementationEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[UserSettings._CountDistinctImplementation.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        COUNT_DISTINCT_IMPLEMENTATION_UNSPECIFIED: UserSettings._CountDistinctImplementation.ValueType  # 0
        COUNT_DISTINCT_IMPLEMENTATION_UNIQ: UserSettings._CountDistinctImplementation.ValueType  # 1
        COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED: UserSettings._CountDistinctImplementation.ValueType  # 2
        COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_64: UserSettings._CountDistinctImplementation.ValueType  # 3
        COUNT_DISTINCT_IMPLEMENTATION_UNIQ_HLL_12: UserSettings._CountDistinctImplementation.ValueType  # 4
        COUNT_DISTINCT_IMPLEMENTATION_UNIQ_EXACT: UserSettings._CountDistinctImplementation.ValueType  # 5
    class CountDistinctImplementation(_CountDistinctImplementation, metaclass=_CountDistinctImplementationEnumTypeWrapper):
        pass

    COUNT_DISTINCT_IMPLEMENTATION_UNSPECIFIED: UserSettings.CountDistinctImplementation.ValueType  # 0
    COUNT_DISTINCT_IMPLEMENTATION_UNIQ: UserSettings.CountDistinctImplementation.ValueType  # 1
    COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED: UserSettings.CountDistinctImplementation.ValueType  # 2
    COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_64: UserSettings.CountDistinctImplementation.ValueType  # 3
    COUNT_DISTINCT_IMPLEMENTATION_UNIQ_HLL_12: UserSettings.CountDistinctImplementation.ValueType  # 4
    COUNT_DISTINCT_IMPLEMENTATION_UNIQ_EXACT: UserSettings.CountDistinctImplementation.ValueType  # 5

    READONLY_FIELD_NUMBER: builtins.int
    ALLOW_DDL_FIELD_NUMBER: builtins.int
    INSERT_QUORUM_FIELD_NUMBER: builtins.int
    CONNECT_TIMEOUT_FIELD_NUMBER: builtins.int
    RECEIVE_TIMEOUT_FIELD_NUMBER: builtins.int
    SEND_TIMEOUT_FIELD_NUMBER: builtins.int
    INSERT_QUORUM_TIMEOUT_FIELD_NUMBER: builtins.int
    SELECT_SEQUENTIAL_CONSISTENCY_FIELD_NUMBER: builtins.int
    MAX_REPLICA_DELAY_FOR_DISTRIBUTED_QUERIES_FIELD_NUMBER: builtins.int
    FALLBACK_TO_STALE_REPLICAS_FOR_DISTRIBUTED_QUERIES_FIELD_NUMBER: builtins.int
    REPLICATION_ALTER_PARTITIONS_SYNC_FIELD_NUMBER: builtins.int
    DISTRIBUTED_PRODUCT_MODE_FIELD_NUMBER: builtins.int
    DISTRIBUTED_AGGREGATION_MEMORY_EFFICIENT_FIELD_NUMBER: builtins.int
    DISTRIBUTED_DDL_TASK_TIMEOUT_FIELD_NUMBER: builtins.int
    SKIP_UNAVAILABLE_SHARDS_FIELD_NUMBER: builtins.int
    COMPILE_FIELD_NUMBER: builtins.int
    MIN_COUNT_TO_COMPILE_FIELD_NUMBER: builtins.int
    COMPILE_EXPRESSIONS_FIELD_NUMBER: builtins.int
    MIN_COUNT_TO_COMPILE_EXPRESSION_FIELD_NUMBER: builtins.int
    MAX_BLOCK_SIZE_FIELD_NUMBER: builtins.int
    MIN_INSERT_BLOCK_SIZE_ROWS_FIELD_NUMBER: builtins.int
    MIN_INSERT_BLOCK_SIZE_BYTES_FIELD_NUMBER: builtins.int
    MAX_INSERT_BLOCK_SIZE_FIELD_NUMBER: builtins.int
    MIN_BYTES_TO_USE_DIRECT_IO_FIELD_NUMBER: builtins.int
    USE_UNCOMPRESSED_CACHE_FIELD_NUMBER: builtins.int
    MERGE_TREE_MAX_ROWS_TO_USE_CACHE_FIELD_NUMBER: builtins.int
    MERGE_TREE_MAX_BYTES_TO_USE_CACHE_FIELD_NUMBER: builtins.int
    MERGE_TREE_MIN_ROWS_FOR_CONCURRENT_READ_FIELD_NUMBER: builtins.int
    MERGE_TREE_MIN_BYTES_FOR_CONCURRENT_READ_FIELD_NUMBER: builtins.int
    MAX_BYTES_BEFORE_EXTERNAL_GROUP_BY_FIELD_NUMBER: builtins.int
    MAX_BYTES_BEFORE_EXTERNAL_SORT_FIELD_NUMBER: builtins.int
    GROUP_BY_TWO_LEVEL_THRESHOLD_FIELD_NUMBER: builtins.int
    GROUP_BY_TWO_LEVEL_THRESHOLD_BYTES_FIELD_NUMBER: builtins.int
    PRIORITY_FIELD_NUMBER: builtins.int
    MAX_THREADS_FIELD_NUMBER: builtins.int
    MAX_MEMORY_USAGE_FIELD_NUMBER: builtins.int
    MAX_MEMORY_USAGE_FOR_USER_FIELD_NUMBER: builtins.int
    MAX_NETWORK_BANDWIDTH_FIELD_NUMBER: builtins.int
    MAX_NETWORK_BANDWIDTH_FOR_USER_FIELD_NUMBER: builtins.int
    FORCE_INDEX_BY_DATE_FIELD_NUMBER: builtins.int
    FORCE_PRIMARY_KEY_FIELD_NUMBER: builtins.int
    MAX_ROWS_TO_READ_FIELD_NUMBER: builtins.int
    MAX_BYTES_TO_READ_FIELD_NUMBER: builtins.int
    READ_OVERFLOW_MODE_FIELD_NUMBER: builtins.int
    MAX_ROWS_TO_GROUP_BY_FIELD_NUMBER: builtins.int
    GROUP_BY_OVERFLOW_MODE_FIELD_NUMBER: builtins.int
    MAX_ROWS_TO_SORT_FIELD_NUMBER: builtins.int
    MAX_BYTES_TO_SORT_FIELD_NUMBER: builtins.int
    SORT_OVERFLOW_MODE_FIELD_NUMBER: builtins.int
    MAX_RESULT_ROWS_FIELD_NUMBER: builtins.int
    MAX_RESULT_BYTES_FIELD_NUMBER: builtins.int
    RESULT_OVERFLOW_MODE_FIELD_NUMBER: builtins.int
    MAX_ROWS_IN_DISTINCT_FIELD_NUMBER: builtins.int
    MAX_BYTES_IN_DISTINCT_FIELD_NUMBER: builtins.int
    DISTINCT_OVERFLOW_MODE_FIELD_NUMBER: builtins.int
    MAX_ROWS_TO_TRANSFER_FIELD_NUMBER: builtins.int
    MAX_BYTES_TO_TRANSFER_FIELD_NUMBER: builtins.int
    TRANSFER_OVERFLOW_MODE_FIELD_NUMBER: builtins.int
    MAX_EXECUTION_TIME_FIELD_NUMBER: builtins.int
    TIMEOUT_OVERFLOW_MODE_FIELD_NUMBER: builtins.int
    MAX_ROWS_IN_SET_FIELD_NUMBER: builtins.int
    MAX_BYTES_IN_SET_FIELD_NUMBER: builtins.int
    SET_OVERFLOW_MODE_FIELD_NUMBER: builtins.int
    MAX_ROWS_IN_JOIN_FIELD_NUMBER: builtins.int
    MAX_BYTES_IN_JOIN_FIELD_NUMBER: builtins.int
    JOIN_OVERFLOW_MODE_FIELD_NUMBER: builtins.int
    MAX_COLUMNS_TO_READ_FIELD_NUMBER: builtins.int
    MAX_TEMPORARY_COLUMNS_FIELD_NUMBER: builtins.int
    MAX_TEMPORARY_NON_CONST_COLUMNS_FIELD_NUMBER: builtins.int
    MAX_QUERY_SIZE_FIELD_NUMBER: builtins.int
    MAX_AST_DEPTH_FIELD_NUMBER: builtins.int
    MAX_AST_ELEMENTS_FIELD_NUMBER: builtins.int
    MAX_EXPANDED_AST_ELEMENTS_FIELD_NUMBER: builtins.int
    MIN_EXECUTION_SPEED_FIELD_NUMBER: builtins.int
    MIN_EXECUTION_SPEED_BYTES_FIELD_NUMBER: builtins.int
    COUNT_DISTINCT_IMPLEMENTATION_FIELD_NUMBER: builtins.int
    INPUT_FORMAT_VALUES_INTERPRET_EXPRESSIONS_FIELD_NUMBER: builtins.int
    INPUT_FORMAT_DEFAULTS_FOR_OMITTED_FIELDS_FIELD_NUMBER: builtins.int
    OUTPUT_FORMAT_JSON_QUOTE_64BIT_INTEGERS_FIELD_NUMBER: builtins.int
    OUTPUT_FORMAT_JSON_QUOTE_DENORMALS_FIELD_NUMBER: builtins.int
    LOW_CARDINALITY_ALLOW_IN_NATIVE_FORMAT_FIELD_NUMBER: builtins.int
    EMPTY_RESULT_FOR_AGGREGATION_BY_EMPTY_SET_FIELD_NUMBER: builtins.int
    JOINED_SUBQUERY_REQUIRES_ALIAS_FIELD_NUMBER: builtins.int
    JOIN_USE_NULLS_FIELD_NUMBER: builtins.int
    TRANSFORM_NULL_IN_FIELD_NUMBER: builtins.int
    HTTP_CONNECTION_TIMEOUT_FIELD_NUMBER: builtins.int
    HTTP_RECEIVE_TIMEOUT_FIELD_NUMBER: builtins.int
    HTTP_SEND_TIMEOUT_FIELD_NUMBER: builtins.int
    ENABLE_HTTP_COMPRESSION_FIELD_NUMBER: builtins.int
    SEND_PROGRESS_IN_HTTP_HEADERS_FIELD_NUMBER: builtins.int
    HTTP_HEADERS_PROGRESS_INTERVAL_FIELD_NUMBER: builtins.int
    ADD_HTTP_CORS_HEADER_FIELD_NUMBER: builtins.int
    QUOTA_MODE_FIELD_NUMBER: builtins.int
    @property
    def readonly(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
        * **0** (default)-no restrictions.
        * **1**-only read data queries are allowed.
        * **2**-read data and change settings queries are allowed.

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
        """
        pass
    @property
    def allow_ddl(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).

        Default value: **true**.

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
        """
        pass
    @property
    def insert_quorum(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Enables or disables write quorum for ClickHouse cluster.
        If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.

        When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
        All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
        Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.

        You can use [select_sequential_consistency] setting to read the data written with write quorum.

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).
        """
        pass
    @property
    def connect_timeout(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Connection timeout in milliseconds.

        Value must be greater than **0** (default: **10000**, 10 seconds).
        """
        pass
    @property
    def receive_timeout(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Receive timeout in milliseconds.

        Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
        """
        pass
    @property
    def send_timeout(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Send timeout in milliseconds.

        Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
        """
        pass
    @property
    def insert_quorum_timeout(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Quorum write timeout in milliseconds.

        If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
        In this case, the client must send the query again to write the data block into the same or another replica.

        Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
        """
        pass
    @property
    def select_sequential_consistency(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.

        Default value: **false** (sequential consistency is disabled).
        """
        pass
    @property
    def max_replica_delay_for_distributed_queries(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.

        Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
        """
        pass
    @property
    def fallback_to_stale_replicas_for_distributed_queries(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Enables or disables query forcing to a stale replica in case the actual data is unavailable.
        If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
        This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.

        Default value: **true** (query forcing is enabled).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
        """
        pass
    @property
    def replication_alter_partitions_sync(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Wait mode for asynchronous actions in **ALTER** queries on replicated tables:

        * **0**-do not wait for replicas.
        * **1**-only wait for own execution (default).
        * **2**-wait for all replicas.

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
        """
        pass
    distributed_product_mode: global___UserSettings.DistributedProductMode.ValueType
    """Determine the behavior of distributed subqueries.

    See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#distributed-product-mode).
    """

    @property
    def distributed_aggregation_memory_efficient(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Enables of disables memory saving mode when doing distributed aggregation.

        When ClickHouse works with a distributed query, external aggregation is done on remote servers.
        Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.

        Default value: **false** (memory saving mode is disabled).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
        """
        pass
    @property
    def distributed_ddl_task_timeout(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Timeout for DDL queries, in milliseconds."""
        pass
    @property
    def skip_unavailable_shards(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Enables or disables silent skipping of unavailable shards.

        A shard is considered unavailable if all its replicas are also unavailable.

        Default value: **false** (silent skipping is disabled).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
        """
        pass
    @property
    def compile(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Enables or disables query compilation.
        If you execute a lot of structurally identical queries, then enable this setting.
        As a result, such queries may be executed faster due to use of queries' compiled parts.

        Use this setting in combination with [min_count_to_compile] setting.

        Default value: **false** (compilation is disabled).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#compile).
        """
        pass
    @property
    def min_count_to_compile(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """How many structurally identical queries ClickHouse has to encounter before they are compiled.

        Minimum value: **0** (default: **3**).

        For the **0** value compilation is synchronous: a query waits for compilation process to complete prior to continuing execution.
        It is recommended to set this value only for testing purposes.

        For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
        When a compiled part of query is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#min-count-to-compile).
        """
        pass
    @property
    def compile_expressions(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Enables or disables expression compilation.
        If you execute a lot of queries that contain identical expressions, then enable this setting.
        As a result, such queries may be executed faster due to use of compiled expressions.

        Use this setting in combination with [min_count_to_compile_expression] setting.

        Default value: **false** (expression compilation is disabled).
        """
        pass
    @property
    def min_count_to_compile_expression(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """How many identical expressions ClickHouse has to encounter before they are compiled.

        Minimum value: **0** (default: **3**).

        For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
        It is recommended to set this value only for testing purposes.

        For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
        When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
        """
        pass
    @property
    def max_block_size(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum block size for reading.

        Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
        The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.

        This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.

        Value must be greater than **0** (default: **65536**).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).
        """
        pass
    @property
    def min_insert_block_size_rows(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
        Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.

        Minimal value: **0**, block squashing is disabled (default: **1048576**).
        """
        pass
    @property
    def min_insert_block_size_bytes(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
        Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.

        Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).
        """
        pass
    @property
    def max_insert_block_size(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Allows to form blocks of the specified size (in bytes) when inserting data in a table.
        This setting has effect only if server is creating such blocks by itself.

        Value must be greater than **0** (default: **1048576**).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).
        """
        pass
    @property
    def min_bytes_to_use_direct_io(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).

        By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
        Such reading strategy is effective when the data volume is small.
        If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.

        If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.

        Minimal value and default value: **0**, Direct I/O is disabled.
        """
        pass
    @property
    def use_uncompressed_cache(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Determines whether to use the cache of uncompressed blocks, or not.
        Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
        Enable this setting for the users who instantiates small queries frequently.

        This setting has effect only for tables of the MergeTree family.

        Default value: **false** (uncompressed cache is disabled).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
        """
        pass
    @property
    def merge_tree_max_rows_to_use_cache(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
        than the specified value.

        Use this setting in combination with [use_uncompressed_cache] setting.

        Value must be greater than **0** (default: **128x8192**).
        """
        pass
    @property
    def merge_tree_max_bytes_to_use_cache(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
        than the specified value.

        Use this setting in combination with [use_uncompressed_cache] setting.

        Value must be greater than **0** (default: **192x10x1024x1024**).
        """
        pass
    @property
    def merge_tree_min_rows_for_concurrent_read(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the minimum number of rows to be read from a file to enable concurrent read.
        If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.

        This setting has effect only for tables of the MergeTree family.

        Value must be greater than **0** (default: **20x8192**).
        """
        pass
    @property
    def merge_tree_min_bytes_for_concurrent_read(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the number of bytes to be read from a file to enable concurrent read.
        If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.

        This setting has effect only for tables of the MergeTree family.

        Value must be greater than **0** (default: **24x10x1024x1024**).
        """
        pass
    @property
    def max_bytes_before_external_group_by(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.

        By default, aggregation is done by employing hash table that resides in RAM.
        A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
        For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.

        Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.

        When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).

        See also: the [distributed_aggregation_memory_efficient] setting.
        """
        pass
    @property
    def max_bytes_before_external_sort(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation."""
        pass
    @property
    def group_by_two_level_threshold(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Sets the threshold of the number of keys, after that the two-level aggregation should be used.

        Minimal value: **0**, threshold is not set (default: **10000**).
        """
        pass
    @property
    def group_by_two_level_threshold_bytes(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Sets the threshold of the number of bytes, after that the two-level aggregation should be used.

        Minimal value: **0**, threshold is not set (default: **100000000**).
        """
        pass
    @property
    def priority(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Sets the priority of a query.

        * **0**-priority is not used.
        * **1**-the highest priority.
        * and so on. The higher the number, the lower a query's priority.

        This setting should be set up for each query individually.

        If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.

        Minimal value and default value: **0**, priority is not used.
        """
        pass
    @property
    def max_threads(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).

        This setting applies to threads that perform the same stages of the query processing pipeline in parallel.

        Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).
        """
        pass
    @property
    def max_memory_usage(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
        This setting does not take server's free RAM amount or total RAM amount into account.

        This limitation is enforced for any user's single query on a single server.

        Minimal value: **0**, no limitation is set.
        Value that is set in the ClickHouse default config file: **10737418240** (10 GB).

        If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
        """
        pass
    @property
    def max_memory_usage_for_user(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
        This setting does not take server's free RAM amount or total RAM amount into account.

        This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    @property
    def max_network_bandwidth(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum speed of data exchange over the network in bytes per second for a query.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    @property
    def max_network_bandwidth_for_user(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    @property
    def force_index_by_date(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """If enabled, query is not executed if the ClickHouse can't use index by date.
        This setting has effect only for tables of the MergeTree family.

        Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
        """
        pass
    @property
    def force_primary_key(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """If enabled, query is not executed if the ClickHouse can't use index by primary key.
        This setting has effect only for tables of the MergeTree family.

        Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
        """
        pass
    @property
    def max_rows_to_read(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum number of rows that can be read from a table when running a query.

        Minimal value and default value: **0**, no limitation is set.

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).
        """
        pass
    @property
    def max_bytes_to_read(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    read_overflow_mode: global___UserSettings.OverflowMode.ValueType
    """Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while reading the data.

    * **throw**-abort query execution, return an error.
    * **break**-stop query execution, return partial result.
    """

    @property
    def max_rows_to_group_by(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum number of unique keys received from aggregation function.
        This setting helps to reduce RAM consumption while doing aggregation.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    group_by_overflow_mode: global___UserSettings.GroupByOverflowMode.ValueType
    """Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing aggregation.

    * **throw**-abort query execution, return an error.
    * **break**-stop query execution, return partial result.
    * **any**-perform approximate **GROUP BY** operation by continuing aggregation for the keys that got into the set, but don't add new keys to the set.
    """

    @property
    def max_rows_to_sort(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum number of rows that can be read from a table for sorting.
        This setting helps to reduce RAM consumption.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    @property
    def max_bytes_to_sort(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
        This setting helps to reduce RAM consumption.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    sort_overflow_mode: global___UserSettings.OverflowMode.ValueType
    """Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while sorting.

    * **throw**-abort query execution, return an error.
    * **break**-stop query execution, return partial result.
    """

    @property
    def max_result_rows(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the number of rows in the result.
        This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    @property
    def max_result_bytes(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the number of bytes in the result.
        This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    result_overflow_mode: global___UserSettings.OverflowMode.ValueType
    """Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while forming result.

    * **throw**-abort query execution, return an error.
    * **break**-stop query execution, return partial result.
    """

    @property
    def max_rows_in_distinct(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum number of different rows when using **DISTINCT**.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    @property
    def max_bytes_in_distinct(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**."""
        pass
    distinct_overflow_mode: global___UserSettings.OverflowMode.ValueType
    """Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing **DISCTINCT**.

    * **throw**-abort query execution, return an error.
    * **break**-stop query execution, return partial result.
    """

    @property
    def max_rows_to_transfer(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    @property
    def max_bytes_to_transfer(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
        table when using **GLOBAL IN**.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    transfer_overflow_mode: global___UserSettings.OverflowMode.ValueType
    """Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing transfers.

    * **throw**-abort query execution, return an error.
    * **break**-stop query execution, return partial result.
    """

    @property
    def max_execution_time(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum query execution time in milliseconds.
        At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    timeout_overflow_mode: global___UserSettings.OverflowMode.ValueType
    """Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) of execution time.

    * **throw**-abort query execution, return an error.
    * **break**-stop query execution, return partial result.
    """

    @property
    def max_rows_in_set(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limit on the number of rows in the set resulting from the execution of the IN section."""
        pass
    @property
    def max_bytes_in_set(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limit on the number of bytes in the set resulting from the execution of the IN section."""
        pass
    set_overflow_mode: global___UserSettings.OverflowMode.ValueType
    """Determine the behavior on exceeding max_rows_in_set or max_bytes_in_set limit.
    Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
    """

    @property
    def max_rows_in_join(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limit on maximum size of the hash table for JOIN, in rows."""
        pass
    @property
    def max_bytes_in_join(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limit on maximum size of the hash table for JOIN, in bytes."""
        pass
    join_overflow_mode: global___UserSettings.OverflowMode.ValueType
    """Determine the behavior on exceeding max_rows_in_join or max_bytes_in_join limit.
    Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
    """

    @property
    def max_columns_to_read(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum number of columns that can be read from a table in a single query.
        If the query requires to read more columns to complete, then it will be aborted.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    @property
    def max_temporary_columns(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    @property
    def max_temporary_non_const_columns(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.

        Minimal value and default value: **0**, no limitation is set.
        """
        pass
    @property
    def max_query_size(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.

        Value must be greater than **0** (default: **262144**).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).
        """
        pass
    @property
    def max_ast_depth(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum depth of query syntax tree.

        Executing a big and complex query may result in building a syntax tree of enormous depth.
        By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

        For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
        A user can be forced to construct more optimized queries, if this setting is used.

        Value must be greater than **0** (default: **1000**).
        If a too small value is set, it may render ClickHouse unable to execute even simple queries.

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).
        """
        pass
    @property
    def max_ast_elements(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum size of query syntax tree in number of nodes.

        Executing a big and complex query may result in building a syntax tree of enormous size.
        By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

        Value must be greater than **0** (default: **50000**).
        If a too small value is set, it may render ClickHouse unable to execute even simple queries.

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).
        """
        pass
    @property
    def max_expanded_ast_elements(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.

        Executing a big and complex query may result in building a syntax tree of enormous size.
        By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

        Value must be greater than **0** (default: **500000**).
        If a too small value is set, it may render ClickHouse unable to execute even simple queries.
        """
        pass
    @property
    def min_execution_speed(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Minimal execution speed in rows per second."""
        pass
    @property
    def min_execution_speed_bytes(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Minimal execution speed in bytes per second."""
        pass
    count_distinct_implementation: global___UserSettings.CountDistinctImplementation.ValueType
    """Aggregate function to use for implementation of count(DISTINCT ...)."""

    @property
    def input_format_values_interpret_expressions(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Enables or disables SQL parser if the fast stream parser cannot parse the data.

        Enable this setting, if the data that you want to insert into a table contains SQL expressions.

        For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
        With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.

        This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.

        Default value: **true** (SQL parser is enabled).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
        """
        pass
    @property
    def input_format_defaults_for_omitted_fields(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.

        Default value: **true** (replacing is enabled).
        """
        pass
    @property
    def output_format_json_quote_64bit_integers(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Enables quoting of 64-bit integers in JSON output format.

        If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
        Otherwise, such integers will not be quoted.

        Default value: **false** (quoting 64-bit integers is disabled).
        """
        pass
    @property
    def output_format_json_quote_denormals(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.

        Default value: **false** (special values do not present in output).
        """
        pass
    @property
    def low_cardinality_allow_in_native_format(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Determines whether to use LowCardinality type in Native format.

        * **true** (default)-yes, use.
        * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.

        LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
        If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.

        If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
        Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.

        Official ClickHouse client works with LowCardinality columns out-of-the-box.

        Default value: **true** (LowCardinality columns are used in Native format).
        """
        pass
    @property
    def empty_result_for_aggregation_by_empty_set(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).

        * **true**-ClickHouse will return an empty result for such queries.
        * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
        """
        pass
    @property
    def joined_subquery_requires_alias(self) -> google.protobuf.wrappers_pb2.BoolValue: ...
    @property
    def join_use_nulls(self) -> google.protobuf.wrappers_pb2.BoolValue: ...
    @property
    def transform_null_in(self) -> google.protobuf.wrappers_pb2.BoolValue: ...
    @property
    def http_connection_timeout(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """HTTP connection timeout, in milliseconds.

        Value must be greater than **0** (default: **1000**, 1 second).
        """
        pass
    @property
    def http_receive_timeout(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """HTTP receive timeout, in milliseconds.

        Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
        """
        pass
    @property
    def http_send_timeout(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """HTTP send timeout, in milliseconds.

        Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
        """
        pass
    @property
    def enable_http_compression(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Enables or disables data compression in HTTP responses.

        By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
        Use this setting to command ClickHouse to compress the result when sending it via HTTP.

        Enable this setting and add the **Accept-Encoding: <compression method>** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.

        ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.

        Default value: **false** (compression is disabled).

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
        """
        pass
    @property
    def send_progress_in_http_headers(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Enables progress notifications using **X-ClickHouse-Progress** HTTP header.

        Default value: **false** (notifications disabled).
        """
        pass
    @property
    def http_headers_progress_interval(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.

        Value must be greater than **0** (default: **100**).
        """
        pass
    @property
    def add_http_cors_header(self) -> google.protobuf.wrappers_pb2.BoolValue:
        """Adds CORS header in HTTP responses.

        Default value: **false** (header is not added).
        """
        pass
    quota_mode: global___UserSettings.QuotaMode.ValueType
    """Quota accounting mode. Possible values: QUOTA_MODE_DEFAULT, QUOTA_MODE_KEYED and QUOTA_MODE_KEYED_BY_IP."""

    def __init__(self,
        *,
        readonly: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        allow_ddl: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        insert_quorum: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        connect_timeout: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        receive_timeout: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        send_timeout: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        insert_quorum_timeout: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        select_sequential_consistency: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        max_replica_delay_for_distributed_queries: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        fallback_to_stale_replicas_for_distributed_queries: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        replication_alter_partitions_sync: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        distributed_product_mode: global___UserSettings.DistributedProductMode.ValueType = ...,
        distributed_aggregation_memory_efficient: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        distributed_ddl_task_timeout: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        skip_unavailable_shards: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        compile: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        min_count_to_compile: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        compile_expressions: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        min_count_to_compile_expression: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_block_size: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        min_insert_block_size_rows: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        min_insert_block_size_bytes: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_insert_block_size: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        min_bytes_to_use_direct_io: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        use_uncompressed_cache: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        merge_tree_max_rows_to_use_cache: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        merge_tree_max_bytes_to_use_cache: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        merge_tree_min_rows_for_concurrent_read: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        merge_tree_min_bytes_for_concurrent_read: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_bytes_before_external_group_by: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_bytes_before_external_sort: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        group_by_two_level_threshold: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        group_by_two_level_threshold_bytes: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        priority: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_threads: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_memory_usage: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_memory_usage_for_user: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_network_bandwidth: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_network_bandwidth_for_user: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        force_index_by_date: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        force_primary_key: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        max_rows_to_read: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_bytes_to_read: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        read_overflow_mode: global___UserSettings.OverflowMode.ValueType = ...,
        max_rows_to_group_by: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        group_by_overflow_mode: global___UserSettings.GroupByOverflowMode.ValueType = ...,
        max_rows_to_sort: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_bytes_to_sort: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        sort_overflow_mode: global___UserSettings.OverflowMode.ValueType = ...,
        max_result_rows: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_result_bytes: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        result_overflow_mode: global___UserSettings.OverflowMode.ValueType = ...,
        max_rows_in_distinct: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_bytes_in_distinct: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        distinct_overflow_mode: global___UserSettings.OverflowMode.ValueType = ...,
        max_rows_to_transfer: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_bytes_to_transfer: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        transfer_overflow_mode: global___UserSettings.OverflowMode.ValueType = ...,
        max_execution_time: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        timeout_overflow_mode: global___UserSettings.OverflowMode.ValueType = ...,
        max_rows_in_set: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_bytes_in_set: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        set_overflow_mode: global___UserSettings.OverflowMode.ValueType = ...,
        max_rows_in_join: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_bytes_in_join: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        join_overflow_mode: global___UserSettings.OverflowMode.ValueType = ...,
        max_columns_to_read: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_temporary_columns: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_temporary_non_const_columns: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_query_size: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_ast_depth: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_ast_elements: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        max_expanded_ast_elements: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        min_execution_speed: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        min_execution_speed_bytes: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        count_distinct_implementation: global___UserSettings.CountDistinctImplementation.ValueType = ...,
        input_format_values_interpret_expressions: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        input_format_defaults_for_omitted_fields: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        output_format_json_quote_64bit_integers: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        output_format_json_quote_denormals: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        low_cardinality_allow_in_native_format: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        empty_result_for_aggregation_by_empty_set: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        joined_subquery_requires_alias: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        join_use_nulls: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        transform_null_in: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        http_connection_timeout: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        http_receive_timeout: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        http_send_timeout: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        enable_http_compression: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        send_progress_in_http_headers: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        http_headers_progress_interval: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        add_http_cors_header: typing.Optional[google.protobuf.wrappers_pb2.BoolValue] = ...,
        quota_mode: global___UserSettings.QuotaMode.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["add_http_cors_header",b"add_http_cors_header","allow_ddl",b"allow_ddl","compile",b"compile","compile_expressions",b"compile_expressions","connect_timeout",b"connect_timeout","distributed_aggregation_memory_efficient",b"distributed_aggregation_memory_efficient","distributed_ddl_task_timeout",b"distributed_ddl_task_timeout","empty_result_for_aggregation_by_empty_set",b"empty_result_for_aggregation_by_empty_set","enable_http_compression",b"enable_http_compression","fallback_to_stale_replicas_for_distributed_queries",b"fallback_to_stale_replicas_for_distributed_queries","force_index_by_date",b"force_index_by_date","force_primary_key",b"force_primary_key","group_by_two_level_threshold",b"group_by_two_level_threshold","group_by_two_level_threshold_bytes",b"group_by_two_level_threshold_bytes","http_connection_timeout",b"http_connection_timeout","http_headers_progress_interval",b"http_headers_progress_interval","http_receive_timeout",b"http_receive_timeout","http_send_timeout",b"http_send_timeout","input_format_defaults_for_omitted_fields",b"input_format_defaults_for_omitted_fields","input_format_values_interpret_expressions",b"input_format_values_interpret_expressions","insert_quorum",b"insert_quorum","insert_quorum_timeout",b"insert_quorum_timeout","join_use_nulls",b"join_use_nulls","joined_subquery_requires_alias",b"joined_subquery_requires_alias","low_cardinality_allow_in_native_format",b"low_cardinality_allow_in_native_format","max_ast_depth",b"max_ast_depth","max_ast_elements",b"max_ast_elements","max_block_size",b"max_block_size","max_bytes_before_external_group_by",b"max_bytes_before_external_group_by","max_bytes_before_external_sort",b"max_bytes_before_external_sort","max_bytes_in_distinct",b"max_bytes_in_distinct","max_bytes_in_join",b"max_bytes_in_join","max_bytes_in_set",b"max_bytes_in_set","max_bytes_to_read",b"max_bytes_to_read","max_bytes_to_sort",b"max_bytes_to_sort","max_bytes_to_transfer",b"max_bytes_to_transfer","max_columns_to_read",b"max_columns_to_read","max_execution_time",b"max_execution_time","max_expanded_ast_elements",b"max_expanded_ast_elements","max_insert_block_size",b"max_insert_block_size","max_memory_usage",b"max_memory_usage","max_memory_usage_for_user",b"max_memory_usage_for_user","max_network_bandwidth",b"max_network_bandwidth","max_network_bandwidth_for_user",b"max_network_bandwidth_for_user","max_query_size",b"max_query_size","max_replica_delay_for_distributed_queries",b"max_replica_delay_for_distributed_queries","max_result_bytes",b"max_result_bytes","max_result_rows",b"max_result_rows","max_rows_in_distinct",b"max_rows_in_distinct","max_rows_in_join",b"max_rows_in_join","max_rows_in_set",b"max_rows_in_set","max_rows_to_group_by",b"max_rows_to_group_by","max_rows_to_read",b"max_rows_to_read","max_rows_to_sort",b"max_rows_to_sort","max_rows_to_transfer",b"max_rows_to_transfer","max_temporary_columns",b"max_temporary_columns","max_temporary_non_const_columns",b"max_temporary_non_const_columns","max_threads",b"max_threads","merge_tree_max_bytes_to_use_cache",b"merge_tree_max_bytes_to_use_cache","merge_tree_max_rows_to_use_cache",b"merge_tree_max_rows_to_use_cache","merge_tree_min_bytes_for_concurrent_read",b"merge_tree_min_bytes_for_concurrent_read","merge_tree_min_rows_for_concurrent_read",b"merge_tree_min_rows_for_concurrent_read","min_bytes_to_use_direct_io",b"min_bytes_to_use_direct_io","min_count_to_compile",b"min_count_to_compile","min_count_to_compile_expression",b"min_count_to_compile_expression","min_execution_speed",b"min_execution_speed","min_execution_speed_bytes",b"min_execution_speed_bytes","min_insert_block_size_bytes",b"min_insert_block_size_bytes","min_insert_block_size_rows",b"min_insert_block_size_rows","output_format_json_quote_64bit_integers",b"output_format_json_quote_64bit_integers","output_format_json_quote_denormals",b"output_format_json_quote_denormals","priority",b"priority","readonly",b"readonly","receive_timeout",b"receive_timeout","replication_alter_partitions_sync",b"replication_alter_partitions_sync","select_sequential_consistency",b"select_sequential_consistency","send_progress_in_http_headers",b"send_progress_in_http_headers","send_timeout",b"send_timeout","skip_unavailable_shards",b"skip_unavailable_shards","transform_null_in",b"transform_null_in","use_uncompressed_cache",b"use_uncompressed_cache"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["add_http_cors_header",b"add_http_cors_header","allow_ddl",b"allow_ddl","compile",b"compile","compile_expressions",b"compile_expressions","connect_timeout",b"connect_timeout","count_distinct_implementation",b"count_distinct_implementation","distinct_overflow_mode",b"distinct_overflow_mode","distributed_aggregation_memory_efficient",b"distributed_aggregation_memory_efficient","distributed_ddl_task_timeout",b"distributed_ddl_task_timeout","distributed_product_mode",b"distributed_product_mode","empty_result_for_aggregation_by_empty_set",b"empty_result_for_aggregation_by_empty_set","enable_http_compression",b"enable_http_compression","fallback_to_stale_replicas_for_distributed_queries",b"fallback_to_stale_replicas_for_distributed_queries","force_index_by_date",b"force_index_by_date","force_primary_key",b"force_primary_key","group_by_overflow_mode",b"group_by_overflow_mode","group_by_two_level_threshold",b"group_by_two_level_threshold","group_by_two_level_threshold_bytes",b"group_by_two_level_threshold_bytes","http_connection_timeout",b"http_connection_timeout","http_headers_progress_interval",b"http_headers_progress_interval","http_receive_timeout",b"http_receive_timeout","http_send_timeout",b"http_send_timeout","input_format_defaults_for_omitted_fields",b"input_format_defaults_for_omitted_fields","input_format_values_interpret_expressions",b"input_format_values_interpret_expressions","insert_quorum",b"insert_quorum","insert_quorum_timeout",b"insert_quorum_timeout","join_overflow_mode",b"join_overflow_mode","join_use_nulls",b"join_use_nulls","joined_subquery_requires_alias",b"joined_subquery_requires_alias","low_cardinality_allow_in_native_format",b"low_cardinality_allow_in_native_format","max_ast_depth",b"max_ast_depth","max_ast_elements",b"max_ast_elements","max_block_size",b"max_block_size","max_bytes_before_external_group_by",b"max_bytes_before_external_group_by","max_bytes_before_external_sort",b"max_bytes_before_external_sort","max_bytes_in_distinct",b"max_bytes_in_distinct","max_bytes_in_join",b"max_bytes_in_join","max_bytes_in_set",b"max_bytes_in_set","max_bytes_to_read",b"max_bytes_to_read","max_bytes_to_sort",b"max_bytes_to_sort","max_bytes_to_transfer",b"max_bytes_to_transfer","max_columns_to_read",b"max_columns_to_read","max_execution_time",b"max_execution_time","max_expanded_ast_elements",b"max_expanded_ast_elements","max_insert_block_size",b"max_insert_block_size","max_memory_usage",b"max_memory_usage","max_memory_usage_for_user",b"max_memory_usage_for_user","max_network_bandwidth",b"max_network_bandwidth","max_network_bandwidth_for_user",b"max_network_bandwidth_for_user","max_query_size",b"max_query_size","max_replica_delay_for_distributed_queries",b"max_replica_delay_for_distributed_queries","max_result_bytes",b"max_result_bytes","max_result_rows",b"max_result_rows","max_rows_in_distinct",b"max_rows_in_distinct","max_rows_in_join",b"max_rows_in_join","max_rows_in_set",b"max_rows_in_set","max_rows_to_group_by",b"max_rows_to_group_by","max_rows_to_read",b"max_rows_to_read","max_rows_to_sort",b"max_rows_to_sort","max_rows_to_transfer",b"max_rows_to_transfer","max_temporary_columns",b"max_temporary_columns","max_temporary_non_const_columns",b"max_temporary_non_const_columns","max_threads",b"max_threads","merge_tree_max_bytes_to_use_cache",b"merge_tree_max_bytes_to_use_cache","merge_tree_max_rows_to_use_cache",b"merge_tree_max_rows_to_use_cache","merge_tree_min_bytes_for_concurrent_read",b"merge_tree_min_bytes_for_concurrent_read","merge_tree_min_rows_for_concurrent_read",b"merge_tree_min_rows_for_concurrent_read","min_bytes_to_use_direct_io",b"min_bytes_to_use_direct_io","min_count_to_compile",b"min_count_to_compile","min_count_to_compile_expression",b"min_count_to_compile_expression","min_execution_speed",b"min_execution_speed","min_execution_speed_bytes",b"min_execution_speed_bytes","min_insert_block_size_bytes",b"min_insert_block_size_bytes","min_insert_block_size_rows",b"min_insert_block_size_rows","output_format_json_quote_64bit_integers",b"output_format_json_quote_64bit_integers","output_format_json_quote_denormals",b"output_format_json_quote_denormals","priority",b"priority","quota_mode",b"quota_mode","read_overflow_mode",b"read_overflow_mode","readonly",b"readonly","receive_timeout",b"receive_timeout","replication_alter_partitions_sync",b"replication_alter_partitions_sync","result_overflow_mode",b"result_overflow_mode","select_sequential_consistency",b"select_sequential_consistency","send_progress_in_http_headers",b"send_progress_in_http_headers","send_timeout",b"send_timeout","set_overflow_mode",b"set_overflow_mode","skip_unavailable_shards",b"skip_unavailable_shards","sort_overflow_mode",b"sort_overflow_mode","timeout_overflow_mode",b"timeout_overflow_mode","transfer_overflow_mode",b"transfer_overflow_mode","transform_null_in",b"transform_null_in","use_uncompressed_cache",b"use_uncompressed_cache"]) -> None: ...
global___UserSettings = UserSettings

class UserQuota(google.protobuf.message.Message):
    """ClickHouse quota representation. Each quota associated with an user and limits it resource usage for an interval.
    See in-depth description [ClickHouse documentation](https://clickhouse.com/docs/en/operations/quotas/).
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    INTERVAL_DURATION_FIELD_NUMBER: builtins.int
    QUERIES_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    RESULT_ROWS_FIELD_NUMBER: builtins.int
    READ_ROWS_FIELD_NUMBER: builtins.int
    EXECUTION_TIME_FIELD_NUMBER: builtins.int
    @property
    def interval_duration(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Duration of interval for quota in milliseconds.
        Minimal value is 1 second.
        """
        pass
    @property
    def queries(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The total number of queries.
        0 - unlimited.
        """
        pass
    @property
    def errors(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The number of queries that threw exception.
        0 - unlimited.
        """
        pass
    @property
    def result_rows(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The total number of rows given as the result..
        0 - unlimited.
        """
        pass
    @property
    def read_rows(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The total number of source rows read from tables for running the query, on all remote servers.
        0 - unlimited.
        """
        pass
    @property
    def execution_time(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """The total query execution time, in milliseconds (wall time).
        0 - unlimited.
        """
        pass
    def __init__(self,
        *,
        interval_duration: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        queries: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        errors: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        result_rows: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        read_rows: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        execution_time: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["errors",b"errors","execution_time",b"execution_time","interval_duration",b"interval_duration","queries",b"queries","read_rows",b"read_rows","result_rows",b"result_rows"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["errors",b"errors","execution_time",b"execution_time","interval_duration",b"interval_duration","queries",b"queries","read_rows",b"read_rows","result_rows",b"result_rows"]) -> None: ...
global___UserQuota = UserQuota
