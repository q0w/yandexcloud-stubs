"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class ConnectorSpec(google.protobuf.message.Message):
    """An object that represents an Apache Kafka® connector.

    See [the documentation](/docs/managed-kafka/concepts/connectors) for details.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class PropertiesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        value: typing.Text
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    TASKS_MAX_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    CONNECTOR_CONFIG_MIRRORMAKER_FIELD_NUMBER: builtins.int
    CONNECTOR_CONFIG_S3_SINK_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Name of the connector."""

    @property
    def tasks_max(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Maximum number of connector tasks. Default value is the number of brokers."""
        pass
    @property
    def properties(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """A set of properties passed to Managed Service for Apache Kafka® with the connector configuration.
        Example: `sync.topics.config.enabled: true`.
        """
        pass
    @property
    def connector_config_mirrormaker(self) -> global___ConnectorConfigMirrorMakerSpec:
        """Configuration of the MirrorMaker connector."""
        pass
    @property
    def connector_config_s3_sink(self) -> global___ConnectorConfigS3SinkSpec:
        """Configuration of S3-Sink connector"""
        pass
    def __init__(self,
        *,
        name: typing.Text = ...,
        tasks_max: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        properties: typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        connector_config_mirrormaker: typing.Optional[global___ConnectorConfigMirrorMakerSpec] = ...,
        connector_config_s3_sink: typing.Optional[global___ConnectorConfigS3SinkSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["connector_config",b"connector_config","connector_config_mirrormaker",b"connector_config_mirrormaker","connector_config_s3_sink",b"connector_config_s3_sink","tasks_max",b"tasks_max"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["connector_config",b"connector_config","connector_config_mirrormaker",b"connector_config_mirrormaker","connector_config_s3_sink",b"connector_config_s3_sink","name",b"name","properties",b"properties","tasks_max",b"tasks_max"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["connector_config",b"connector_config"]) -> typing.Optional[typing_extensions.Literal["connector_config_mirrormaker","connector_config_s3_sink"]]: ...
global___ConnectorSpec = ConnectorSpec

class UpdateConnectorSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class PropertiesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        value: typing.Text
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    TASKS_MAX_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    CONNECTOR_CONFIG_MIRRORMAKER_FIELD_NUMBER: builtins.int
    CONNECTOR_CONFIG_S3_SINK_FIELD_NUMBER: builtins.int
    @property
    def tasks_max(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Maximum number of connector tasks to update."""
        pass
    @property
    def properties(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """A set of new or changed properties to update for the connector. They are passed with the connector configuration to Managed Service for Apache Kafka®.
        Example: `sync.topics.config.enabled: false`.
        """
        pass
    @property
    def connector_config_mirrormaker(self) -> global___ConnectorConfigMirrorMakerSpec:
        """Configuration of the MirrorMaker connector."""
        pass
    @property
    def connector_config_s3_sink(self) -> global___UpdateConnectorConfigS3SinkSpec:
        """Update specification for S3-Sink Connector."""
        pass
    def __init__(self,
        *,
        tasks_max: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        properties: typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        connector_config_mirrormaker: typing.Optional[global___ConnectorConfigMirrorMakerSpec] = ...,
        connector_config_s3_sink: typing.Optional[global___UpdateConnectorConfigS3SinkSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["connector_config",b"connector_config","connector_config_mirrormaker",b"connector_config_mirrormaker","connector_config_s3_sink",b"connector_config_s3_sink","tasks_max",b"tasks_max"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["connector_config",b"connector_config","connector_config_mirrormaker",b"connector_config_mirrormaker","connector_config_s3_sink",b"connector_config_s3_sink","properties",b"properties","tasks_max",b"tasks_max"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["connector_config",b"connector_config"]) -> typing.Optional[typing_extensions.Literal["connector_config_mirrormaker","connector_config_s3_sink"]]: ...
global___UpdateConnectorSpec = UpdateConnectorSpec

class ConnectorConfigMirrorMakerSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SOURCE_CLUSTER_FIELD_NUMBER: builtins.int
    TARGET_CLUSTER_FIELD_NUMBER: builtins.int
    TOPICS_FIELD_NUMBER: builtins.int
    REPLICATION_FACTOR_FIELD_NUMBER: builtins.int
    @property
    def source_cluster(self) -> global___ClusterConnectionSpec:
        """Source cluster configuration for the MirrorMaker connector."""
        pass
    @property
    def target_cluster(self) -> global___ClusterConnectionSpec:
        """Target cluster configuration for the MirrorMaker connector."""
        pass
    topics: typing.Text
    """List of Kafka topics, separated by `,`."""

    @property
    def replication_factor(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Replication factor for automatically created topics."""
        pass
    def __init__(self,
        *,
        source_cluster: typing.Optional[global___ClusterConnectionSpec] = ...,
        target_cluster: typing.Optional[global___ClusterConnectionSpec] = ...,
        topics: typing.Text = ...,
        replication_factor: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["replication_factor",b"replication_factor","source_cluster",b"source_cluster","target_cluster",b"target_cluster"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["replication_factor",b"replication_factor","source_cluster",b"source_cluster","target_cluster",b"target_cluster","topics",b"topics"]) -> None: ...
global___ConnectorConfigMirrorMakerSpec = ConnectorConfigMirrorMakerSpec

class ClusterConnectionSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ALIAS_FIELD_NUMBER: builtins.int
    THIS_CLUSTER_FIELD_NUMBER: builtins.int
    EXTERNAL_CLUSTER_FIELD_NUMBER: builtins.int
    alias: typing.Text
    """Alias of cluster connection configuration.
    Examples: `source`, `target`.
    """

    @property
    def this_cluster(self) -> global___ThisClusterSpec:
        """Connection configuration of the cluster the connector belongs to. As all credentials are already known, leave this parameter empty."""
        pass
    @property
    def external_cluster(self) -> global___ExternalClusterConnectionSpec:
        """Configuration of connection to an external cluster with all the necessary credentials."""
        pass
    def __init__(self,
        *,
        alias: typing.Text = ...,
        this_cluster: typing.Optional[global___ThisClusterSpec] = ...,
        external_cluster: typing.Optional[global___ExternalClusterConnectionSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cluster_connection",b"cluster_connection","external_cluster",b"external_cluster","this_cluster",b"this_cluster"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["alias",b"alias","cluster_connection",b"cluster_connection","external_cluster",b"external_cluster","this_cluster",b"this_cluster"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["cluster_connection",b"cluster_connection"]) -> typing.Optional[typing_extensions.Literal["this_cluster","external_cluster"]]: ...
global___ClusterConnectionSpec = ClusterConnectionSpec

class ThisClusterSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    def __init__(self,
        ) -> None: ...
global___ThisClusterSpec = ThisClusterSpec

class ExternalClusterConnectionSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BOOTSTRAP_SERVERS_FIELD_NUMBER: builtins.int
    SASL_USERNAME_FIELD_NUMBER: builtins.int
    SASL_PASSWORD_FIELD_NUMBER: builtins.int
    SASL_MECHANISM_FIELD_NUMBER: builtins.int
    SECURITY_PROTOCOL_FIELD_NUMBER: builtins.int
    SSL_TRUSTSTORE_CERTIFICATES_FIELD_NUMBER: builtins.int
    bootstrap_servers: typing.Text
    """List of bootstrap servers of the cluster, separated by `,`."""

    sasl_username: typing.Text
    """SASL username to use for connection to the cluster."""

    sasl_password: typing.Text
    """SASL password to use for connection to the cluster."""

    sasl_mechanism: typing.Text
    """SASL mechanism to use for connection to the cluster."""

    security_protocol: typing.Text
    """Security protocol to use for connection to the cluster."""

    ssl_truststore_certificates: typing.Text
    """CA in PEM format to connect to external cluster.
    Lines of certificate separated by '\\n' symbol.
    """

    def __init__(self,
        *,
        bootstrap_servers: typing.Text = ...,
        sasl_username: typing.Text = ...,
        sasl_password: typing.Text = ...,
        sasl_mechanism: typing.Text = ...,
        security_protocol: typing.Text = ...,
        ssl_truststore_certificates: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["bootstrap_servers",b"bootstrap_servers","sasl_mechanism",b"sasl_mechanism","sasl_password",b"sasl_password","sasl_username",b"sasl_username","security_protocol",b"security_protocol","ssl_truststore_certificates",b"ssl_truststore_certificates"]) -> None: ...
global___ExternalClusterConnectionSpec = ExternalClusterConnectionSpec

class Connector(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _Health:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _HealthEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Connector._Health.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        HEALTH_UNKNOWN: Connector._Health.ValueType  # 0
        """Health of the connector is unknown."""

        ALIVE: Connector._Health.ValueType  # 1
        """Connector is running."""

        DEAD: Connector._Health.ValueType  # 2
        """Connector has failed to start."""

    class Health(_Health, metaclass=_HealthEnumTypeWrapper):
        pass

    HEALTH_UNKNOWN: Connector.Health.ValueType  # 0
    """Health of the connector is unknown."""

    ALIVE: Connector.Health.ValueType  # 1
    """Connector is running."""

    DEAD: Connector.Health.ValueType  # 2
    """Connector has failed to start."""


    class _Status:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _StatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Connector._Status.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        STATUS_UNKNOWN: Connector._Status.ValueType  # 0
        """Connector state is unknown."""

        RUNNING: Connector._Status.ValueType  # 1
        """Connector is running normally."""

        ERROR: Connector._Status.ValueType  # 2
        """Connector has encountered a problem and cannot operate."""

        PAUSED: Connector._Status.ValueType  # 3
        """Connector is paused."""

    class Status(_Status, metaclass=_StatusEnumTypeWrapper):
        pass

    STATUS_UNKNOWN: Connector.Status.ValueType  # 0
    """Connector state is unknown."""

    RUNNING: Connector.Status.ValueType  # 1
    """Connector is running normally."""

    ERROR: Connector.Status.ValueType  # 2
    """Connector has encountered a problem and cannot operate."""

    PAUSED: Connector.Status.ValueType  # 3
    """Connector is paused."""


    class PropertiesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        value: typing.Text
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    TASKS_MAX_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    HEALTH_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    CONNECTOR_CONFIG_MIRRORMAKER_FIELD_NUMBER: builtins.int
    CONNECTOR_CONFIG_S3_SINK_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Name of the connector."""

    @property
    def tasks_max(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Maximum number of connector tasks. Default value is the number of brokers."""
        pass
    @property
    def properties(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """A set of properties passed to Managed Service for Apache Kafka® with the connector configuration.
        Example: `sync.topics.config.enabled: true`.
        """
        pass
    health: global___Connector.Health.ValueType
    """Connector health."""

    status: global___Connector.Status.ValueType
    """Current status of the connector."""

    cluster_id: typing.Text
    """ID of the Apache Kafka® cluster that the connector belongs to."""

    @property
    def connector_config_mirrormaker(self) -> global___ConnectorConfigMirrorMaker:
        """Configuration of the MirrorMaker connector."""
        pass
    @property
    def connector_config_s3_sink(self) -> global___ConnectorConfigS3Sink: ...
    def __init__(self,
        *,
        name: typing.Text = ...,
        tasks_max: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        properties: typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        health: global___Connector.Health.ValueType = ...,
        status: global___Connector.Status.ValueType = ...,
        cluster_id: typing.Text = ...,
        connector_config_mirrormaker: typing.Optional[global___ConnectorConfigMirrorMaker] = ...,
        connector_config_s3_sink: typing.Optional[global___ConnectorConfigS3Sink] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["connector_config",b"connector_config","connector_config_mirrormaker",b"connector_config_mirrormaker","connector_config_s3_sink",b"connector_config_s3_sink","tasks_max",b"tasks_max"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","connector_config",b"connector_config","connector_config_mirrormaker",b"connector_config_mirrormaker","connector_config_s3_sink",b"connector_config_s3_sink","health",b"health","name",b"name","properties",b"properties","status",b"status","tasks_max",b"tasks_max"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["connector_config",b"connector_config"]) -> typing.Optional[typing_extensions.Literal["connector_config_mirrormaker","connector_config_s3_sink"]]: ...
global___Connector = Connector

class ConnectorConfigMirrorMaker(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SOURCE_CLUSTER_FIELD_NUMBER: builtins.int
    TARGET_CLUSTER_FIELD_NUMBER: builtins.int
    TOPICS_FIELD_NUMBER: builtins.int
    REPLICATION_FACTOR_FIELD_NUMBER: builtins.int
    @property
    def source_cluster(self) -> global___ClusterConnection:
        """Source cluster connection configuration."""
        pass
    @property
    def target_cluster(self) -> global___ClusterConnection:
        """Target cluster connection configuration."""
        pass
    topics: typing.Text
    """List of Kafka topics, separated by `,`."""

    @property
    def replication_factor(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Replication factor for automatically created topics."""
        pass
    def __init__(self,
        *,
        source_cluster: typing.Optional[global___ClusterConnection] = ...,
        target_cluster: typing.Optional[global___ClusterConnection] = ...,
        topics: typing.Text = ...,
        replication_factor: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["replication_factor",b"replication_factor","source_cluster",b"source_cluster","target_cluster",b"target_cluster"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["replication_factor",b"replication_factor","source_cluster",b"source_cluster","target_cluster",b"target_cluster","topics",b"topics"]) -> None: ...
global___ConnectorConfigMirrorMaker = ConnectorConfigMirrorMaker

class ClusterConnection(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ALIAS_FIELD_NUMBER: builtins.int
    THIS_CLUSTER_FIELD_NUMBER: builtins.int
    EXTERNAL_CLUSTER_FIELD_NUMBER: builtins.int
    alias: typing.Text
    """Alias of cluster connection configuration.
    Examples: `source`, `target`.
    """

    @property
    def this_cluster(self) -> global___ThisCluster:
        """Connection configuration of the cluster the connector belongs to. As all credentials are already known, leave this parameter empty."""
        pass
    @property
    def external_cluster(self) -> global___ExternalClusterConnection:
        """Configuration of connection to an external cluster with all the necessary credentials."""
        pass
    def __init__(self,
        *,
        alias: typing.Text = ...,
        this_cluster: typing.Optional[global___ThisCluster] = ...,
        external_cluster: typing.Optional[global___ExternalClusterConnection] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cluster_connection",b"cluster_connection","external_cluster",b"external_cluster","this_cluster",b"this_cluster"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["alias",b"alias","cluster_connection",b"cluster_connection","external_cluster",b"external_cluster","this_cluster",b"this_cluster"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["cluster_connection",b"cluster_connection"]) -> typing.Optional[typing_extensions.Literal["this_cluster","external_cluster"]]: ...
global___ClusterConnection = ClusterConnection

class ThisCluster(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    def __init__(self,
        ) -> None: ...
global___ThisCluster = ThisCluster

class ExternalClusterConnection(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BOOTSTRAP_SERVERS_FIELD_NUMBER: builtins.int
    SASL_USERNAME_FIELD_NUMBER: builtins.int
    SASL_MECHANISM_FIELD_NUMBER: builtins.int
    SECURITY_PROTOCOL_FIELD_NUMBER: builtins.int
    bootstrap_servers: typing.Text
    """List of bootstrap servers of the cluster, separated by `,`."""

    sasl_username: typing.Text
    """SASL username to use for connection to the cluster."""

    sasl_mechanism: typing.Text
    """SASL mechanism to use for connection to the cluster."""

    security_protocol: typing.Text
    """Security protocol to use for connection to the cluster."""

    def __init__(self,
        *,
        bootstrap_servers: typing.Text = ...,
        sasl_username: typing.Text = ...,
        sasl_mechanism: typing.Text = ...,
        security_protocol: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["bootstrap_servers",b"bootstrap_servers","sasl_mechanism",b"sasl_mechanism","sasl_username",b"sasl_username","security_protocol",b"security_protocol"]) -> None: ...
global___ExternalClusterConnection = ExternalClusterConnection

class S3ConnectionSpec(google.protobuf.message.Message):
    """Specification for S3Connection -
    settings of connection to AWS-compatible S3 storage, that
    are source or target of Kafka S3-connectors.
    YC Object Storage is AWS-compatible.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BUCKET_NAME_FIELD_NUMBER: builtins.int
    EXTERNAL_S3_FIELD_NUMBER: builtins.int
    bucket_name: typing.Text
    @property
    def external_s3(self) -> global___ExternalS3StorageSpec: ...
    def __init__(self,
        *,
        bucket_name: typing.Text = ...,
        external_s3: typing.Optional[global___ExternalS3StorageSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["external_s3",b"external_s3","storage",b"storage"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bucket_name",b"bucket_name","external_s3",b"external_s3","storage",b"storage"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["storage",b"storage"]) -> typing.Optional[typing_extensions.Literal["external_s3"]]: ...
global___S3ConnectionSpec = S3ConnectionSpec

class ExternalS3StorageSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ACCESS_KEY_ID_FIELD_NUMBER: builtins.int
    SECRET_ACCESS_KEY_FIELD_NUMBER: builtins.int
    ENDPOINT_FIELD_NUMBER: builtins.int
    REGION_FIELD_NUMBER: builtins.int
    access_key_id: typing.Text
    secret_access_key: typing.Text
    endpoint: typing.Text
    region: typing.Text
    """Default is 'us-east-1'"""

    def __init__(self,
        *,
        access_key_id: typing.Text = ...,
        secret_access_key: typing.Text = ...,
        endpoint: typing.Text = ...,
        region: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["access_key_id",b"access_key_id","endpoint",b"endpoint","region",b"region","secret_access_key",b"secret_access_key"]) -> None: ...
global___ExternalS3StorageSpec = ExternalS3StorageSpec

class S3Connection(google.protobuf.message.Message):
    """Resource for S3Connection -
    settings of connection to AWS-compatible S3 storage, that
    are source or target of Kafka S3-connectors.
    YC Object Storage is AWS-compatible.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BUCKET_NAME_FIELD_NUMBER: builtins.int
    EXTERNAL_S3_FIELD_NUMBER: builtins.int
    bucket_name: typing.Text
    @property
    def external_s3(self) -> global___ExternalS3Storage: ...
    def __init__(self,
        *,
        bucket_name: typing.Text = ...,
        external_s3: typing.Optional[global___ExternalS3Storage] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["external_s3",b"external_s3","storage",b"storage"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bucket_name",b"bucket_name","external_s3",b"external_s3","storage",b"storage"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["storage",b"storage"]) -> typing.Optional[typing_extensions.Literal["external_s3"]]: ...
global___S3Connection = S3Connection

class ExternalS3Storage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ACCESS_KEY_ID_FIELD_NUMBER: builtins.int
    ENDPOINT_FIELD_NUMBER: builtins.int
    REGION_FIELD_NUMBER: builtins.int
    access_key_id: typing.Text
    endpoint: typing.Text
    region: typing.Text
    """Default is 'us-east-1'"""

    def __init__(self,
        *,
        access_key_id: typing.Text = ...,
        endpoint: typing.Text = ...,
        region: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["access_key_id",b"access_key_id","endpoint",b"endpoint","region",b"region"]) -> None: ...
global___ExternalS3Storage = ExternalS3Storage

class ConnectorConfigS3Sink(google.protobuf.message.Message):
    """An Apache Kafka® S3-Sink
    connector resource.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TOPICS_FIELD_NUMBER: builtins.int
    FILE_COMPRESSION_TYPE_FIELD_NUMBER: builtins.int
    FILE_MAX_RECORDS_FIELD_NUMBER: builtins.int
    S3_CONNECTION_FIELD_NUMBER: builtins.int
    topics: typing.Text
    """List of Kafka topics, separated by ','"""

    file_compression_type: typing.Text
    """The compression type used for files put on GCS.
    The supported values are: `gzip`, `snappy`, `zstd`, `none`.
    Optional, the default is `none`.
    """

    @property
    def file_max_records(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Max records per file."""
        pass
    @property
    def s3_connection(self) -> global___S3Connection:
        """Credentials for connecting to S3 storage"""
        pass
    def __init__(self,
        *,
        topics: typing.Text = ...,
        file_compression_type: typing.Text = ...,
        file_max_records: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        s3_connection: typing.Optional[global___S3Connection] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["file_max_records",b"file_max_records","s3_connection",b"s3_connection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["file_compression_type",b"file_compression_type","file_max_records",b"file_max_records","s3_connection",b"s3_connection","topics",b"topics"]) -> None: ...
global___ConnectorConfigS3Sink = ConnectorConfigS3Sink

class ConnectorConfigS3SinkSpec(google.protobuf.message.Message):
    """Specification for Kafka S3-Sink Connector"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TOPICS_FIELD_NUMBER: builtins.int
    FILE_COMPRESSION_TYPE_FIELD_NUMBER: builtins.int
    FILE_MAX_RECORDS_FIELD_NUMBER: builtins.int
    S3_CONNECTION_FIELD_NUMBER: builtins.int
    topics: typing.Text
    """List of Kafka topics, separated by ','."""

    file_compression_type: typing.Text
    """The compression type used for files put on GCS.
    The supported values are: `gzip`, `snappy`, `zstd`, `none`.
    Optional, the default is `none`.
    """

    @property
    def file_max_records(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Max records per file."""
        pass
    @property
    def s3_connection(self) -> global___S3ConnectionSpec:
        """Credentials for connecting to S3 storage"""
        pass
    def __init__(self,
        *,
        topics: typing.Text = ...,
        file_compression_type: typing.Text = ...,
        file_max_records: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        s3_connection: typing.Optional[global___S3ConnectionSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["file_max_records",b"file_max_records","s3_connection",b"s3_connection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["file_compression_type",b"file_compression_type","file_max_records",b"file_max_records","s3_connection",b"s3_connection","topics",b"topics"]) -> None: ...
global___ConnectorConfigS3SinkSpec = ConnectorConfigS3SinkSpec

class UpdateConnectorConfigS3SinkSpec(google.protobuf.message.Message):
    """Specification for update Kafka S3-Sink Connector"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TOPICS_FIELD_NUMBER: builtins.int
    FILE_MAX_RECORDS_FIELD_NUMBER: builtins.int
    S3_CONNECTION_FIELD_NUMBER: builtins.int
    topics: typing.Text
    """List of Kafka topics, separated by ','."""

    @property
    def file_max_records(self) -> google.protobuf.wrappers_pb2.Int64Value:
        """Max records per file."""
        pass
    @property
    def s3_connection(self) -> global___S3ConnectionSpec:
        """Credentials for connecting to S3 storage"""
        pass
    def __init__(self,
        *,
        topics: typing.Text = ...,
        file_max_records: typing.Optional[google.protobuf.wrappers_pb2.Int64Value] = ...,
        s3_connection: typing.Optional[global___S3ConnectionSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["file_max_records",b"file_max_records","s3_connection",b"s3_connection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["file_max_records",b"file_max_records","s3_connection",b"s3_connection","topics",b"topics"]) -> None: ...
global___UpdateConnectorConfigS3SinkSpec = UpdateConnectorConfigS3SinkSpec
