"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions
import yandex.cloud.mdb.kafka.v1.connector_pb2

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class GetConnectorRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    CONNECTOR_NAME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the Apache Kafka Cluster resource to return.
    To get the cluster ID use a [ClusterService.List] request.
    """

    connector_name: typing.Text
    """Name of the Apache Kafka Connector resource to return.
    To get the name of the connector use a [ConnectorService.List] request.
    """

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        connector_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","connector_name",b"connector_name"]) -> None: ...
global___GetConnectorRequest = GetConnectorRequest

class ListConnectorsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the Apache Kafka cluster to list connectors in.
    To get the cluster ID use a [ClusterService.List] request.
    """

    page_size: builtins.int
    """The maximum number of results per page to return. If the number of available
    results is larger than [page_size], the service returns a [ListConnectorsResponse.next_page_token]
    that can be used to get the next page of results in subsequent list requests.

    """

    page_token: typing.Text
    """Page token. To get the next page of results, Set [page_token] to the [ListConnectorsResponse.next_page_token]
    returned by a previous list request.
    """

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        page_size: builtins.int = ...,
        page_token: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","page_size",b"page_size","page_token",b"page_token"]) -> None: ...
global___ListConnectorsRequest = ListConnectorsRequest

class ListConnectorsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CONNECTORS_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def connectors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[yandex.cloud.mdb.kafka.v1.connector_pb2.Connector]:
        """List of Apache Kafka Connector resources."""
        pass
    next_page_token: typing.Text
    """This token allows you to get the next page of results for list requests. If the number of results
    is larger than [ListConnectorsRequest.page_size], use the [next_page_token] as the value
    for the [ListConnectorsRequest.page_token] parameter in the next list request. Each subsequent
    list request will have its own [next_page_token] to continue paging through the results.
    """

    def __init__(self,
        *,
        connectors: typing.Optional[typing.Iterable[yandex.cloud.mdb.kafka.v1.connector_pb2.Connector]] = ...,
        next_page_token: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["connectors",b"connectors","next_page_token",b"next_page_token"]) -> None: ...
global___ListConnectorsResponse = ListConnectorsResponse

class CreateConnectorRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    CONNECTOR_SPEC_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """Required. ID of the Apache Kafka cluster to create a connector in.
    To get the cluster ID use a [ClusterService.List] request.
    """

    @property
    def connector_spec(self) -> yandex.cloud.mdb.kafka.v1.connector_pb2.ConnectorSpec:
        """Required. Configuration of the connector to create."""
        pass
    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        connector_spec: typing.Optional[yandex.cloud.mdb.kafka.v1.connector_pb2.ConnectorSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["connector_spec",b"connector_spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","connector_spec",b"connector_spec"]) -> None: ...
global___CreateConnectorRequest = CreateConnectorRequest

class CreateConnectorMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    CONNECTOR_NAME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the Apache Kafka cluster where a connector is being created."""

    connector_name: typing.Text
    """Name of the Apache Kafka connector that is being created."""

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        connector_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","connector_name",b"connector_name"]) -> None: ...
global___CreateConnectorMetadata = CreateConnectorMetadata

class UpdateConnectorRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    CONNECTOR_NAME_FIELD_NUMBER: builtins.int
    UPDATE_MASK_FIELD_NUMBER: builtins.int
    CONNECTOR_SPEC_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """Required. ID of the Apache Kafka cluster to update a connector in.
    To get the cluster ID use a [ClusterService.List] request.
    """

    connector_name: typing.Text
    """Required. Name of the connector to update.
    To get the name of the connector, use a [ConnectorService.List] request.
    """

    @property
    def update_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """Field mask that specifies which fields of the Connector resource should be updated."""
        pass
    @property
    def connector_spec(self) -> yandex.cloud.mdb.kafka.v1.connector_pb2.UpdateConnectorSpec:
        """Required. Configuration of the connector to update."""
        pass
    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        connector_name: typing.Text = ...,
        update_mask: typing.Optional[google.protobuf.field_mask_pb2.FieldMask] = ...,
        connector_spec: typing.Optional[yandex.cloud.mdb.kafka.v1.connector_pb2.UpdateConnectorSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["connector_spec",b"connector_spec","update_mask",b"update_mask"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","connector_name",b"connector_name","connector_spec",b"connector_spec","update_mask",b"update_mask"]) -> None: ...
global___UpdateConnectorRequest = UpdateConnectorRequest

class UpdateConnectorMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    CONNECTOR_NAME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the Apache Kafka cluster where a connector is being updated."""

    connector_name: typing.Text
    """Name of the Apache Kafka connector that is being updated."""

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        connector_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","connector_name",b"connector_name"]) -> None: ...
global___UpdateConnectorMetadata = UpdateConnectorMetadata

class DeleteConnectorRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    CONNECTOR_NAME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """Required. ID of the Apache Kafka cluster to delete a connector in.
    To get the cluster ID, use a [ClusterService.List] request.
    """

    connector_name: typing.Text
    """Required. Name of the connector to delete.
    To get the name of the connector, use a [ConnectorService.List] request.
    """

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        connector_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","connector_name",b"connector_name"]) -> None: ...
global___DeleteConnectorRequest = DeleteConnectorRequest

class DeleteConnectorMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    CONNECTOR_NAME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the Apache Kafka cluster where a connector is being deleted."""

    connector_name: typing.Text
    """Name of the Apache Kafka connector that is being deleted."""

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        connector_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","connector_name",b"connector_name"]) -> None: ...
global___DeleteConnectorMetadata = DeleteConnectorMetadata

class ResumeConnectorRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    CONNECTOR_NAME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """Required. ID of the Apache Kafka cluster to resume connector in."""

    connector_name: typing.Text
    """Name of the Apache Kafka Connector resource to resume.
    To get the name of the connector use a [ConnectorService.List] request.
    """

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        connector_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","connector_name",b"connector_name"]) -> None: ...
global___ResumeConnectorRequest = ResumeConnectorRequest

class ResumeConnectorMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    CONNECTOR_NAME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """Required. ID of the Apache Kafka cluster."""

    connector_name: typing.Text
    """Name of the Apache Kafka Connector resource that is beign resumed."""

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        connector_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","connector_name",b"connector_name"]) -> None: ...
global___ResumeConnectorMetadata = ResumeConnectorMetadata

class PauseConnectorRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    CONNECTOR_NAME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """Required. ID of the Apache Kafka cluster to pause connector in."""

    connector_name: typing.Text
    """Name of the Apache Kafka Connector resource to pause.
    To get the name of the connector use a [ConnectorService.List] request.
    """

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        connector_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","connector_name",b"connector_name"]) -> None: ...
global___PauseConnectorRequest = PauseConnectorRequest

class PauseConnectorMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    CONNECTOR_NAME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """Required. ID of the Apache Kafka cluster."""

    connector_name: typing.Text
    """Name of the Apache Kafka Connector resource that is being paused."""

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        connector_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","connector_name",b"connector_name"]) -> None: ...
global___PauseConnectorMetadata = PauseConnectorMetadata
