"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions
import yandex.cloud.mdb.sqlserver.v1.database_pb2

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class GetDatabaseRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    DATABASE_NAME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the SQL Server cluster the database belongs to.

    To get the cluster ID, use a [ClusterService.List] request.
    """

    database_name: typing.Text
    """Name of the SQL Server database to return.

    To get the name of the database use a [DatabaseService.List] request.
    """

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        database_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","database_name",b"database_name"]) -> None: ...
global___GetDatabaseRequest = GetDatabaseRequest

class ListDatabasesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    PAGE_SIZE_FIELD_NUMBER: builtins.int
    PAGE_TOKEN_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the SQL Server cluster to list databases in.

    To get the cluster ID, use a [ClusterService.List] request.
    """

    page_size: builtins.int
    """The maximum number of results per page to return. If the number of available
    results is larger than `page_size`, the service returns a [ListDatabasesResponse.next_page_token]
    that can be used to get the next page of results in subsequent list requests.
    """

    page_token: typing.Text
    """Page token. To get the next page of results, Set `page_token` to the [ListDatabasesResponse.next_page_token]
    returned by a previous list request.
    """

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        page_size: builtins.int = ...,
        page_token: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","page_size",b"page_size","page_token",b"page_token"]) -> None: ...
global___ListDatabasesRequest = ListDatabasesRequest

class ListDatabasesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DATABASES_FIELD_NUMBER: builtins.int
    NEXT_PAGE_TOKEN_FIELD_NUMBER: builtins.int
    @property
    def databases(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[yandex.cloud.mdb.sqlserver.v1.database_pb2.Database]:
        """List of SQL Server databases."""
        pass
    next_page_token: typing.Text
    """Token that allows you to get the next page of results for list requests. If the number of results
    is larger than [ListDatabasesRequest.page_size], use the `next_page_token` as the value
    for the [ListDatabasesRequest.page_token] parameter in the next list request. Each subsequent
    list request will have its own `next_page_token` to continue paging through the results.
    """

    def __init__(self,
        *,
        databases: typing.Optional[typing.Iterable[yandex.cloud.mdb.sqlserver.v1.database_pb2.Database]] = ...,
        next_page_token: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["databases",b"databases","next_page_token",b"next_page_token"]) -> None: ...
global___ListDatabasesResponse = ListDatabasesResponse

class CreateDatabaseRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    DATABASE_SPEC_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the SQL Server cluster to create a database in.

    To get the cluster ID, use a [ClusterService.List] request.
    """

    @property
    def database_spec(self) -> yandex.cloud.mdb.sqlserver.v1.database_pb2.DatabaseSpec:
        """Configuration of the database to create."""
        pass
    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        database_spec: typing.Optional[yandex.cloud.mdb.sqlserver.v1.database_pb2.DatabaseSpec] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["database_spec",b"database_spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","database_spec",b"database_spec"]) -> None: ...
global___CreateDatabaseRequest = CreateDatabaseRequest

class CreateDatabaseMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    DATABASE_NAME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the SQL Server cluster where the database is being created."""

    database_name: typing.Text
    """Name of the SQL Server database being created."""

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        database_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","database_name",b"database_name"]) -> None: ...
global___CreateDatabaseMetadata = CreateDatabaseMetadata

class DeleteDatabaseRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    DATABASE_NAME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the SQL Server cluster to delete a database in.

    To get the cluster ID, use a [ClusterService.List] request.
    """

    database_name: typing.Text
    """Name of the database to delete.

    To get the name of the database, use a [DatabaseService.List] request.
    """

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        database_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","database_name",b"database_name"]) -> None: ...
global___DeleteDatabaseRequest = DeleteDatabaseRequest

class DeleteDatabaseMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    DATABASE_NAME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the SQL Server cluster where the database is being deleted."""

    database_name: typing.Text
    """Name of the SQL Server database being deleted."""

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        database_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","database_name",b"database_name"]) -> None: ...
global___DeleteDatabaseMetadata = DeleteDatabaseMetadata

class RestoreDatabaseRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    DATABASE_NAME_FIELD_NUMBER: builtins.int
    FROM_DATABASE_FIELD_NUMBER: builtins.int
    BACKUP_ID_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """Required. ID of the SQL Server cluster to restore a database in.
    To get the cluster ID, use a [ClusterService.List] request
    """

    database_name: typing.Text
    """Name of the SQLServer database that is being restored."""

    from_database: typing.Text
    """name of the database which backup will be used to restore the database"""

    backup_id: typing.Text
    """ID of a backup to be used"""

    @property
    def time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Timestamp which is used for Point-in-Time recovery"""
        pass
    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        database_name: typing.Text = ...,
        from_database: typing.Text = ...,
        backup_id: typing.Text = ...,
        time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["time",b"time"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["backup_id",b"backup_id","cluster_id",b"cluster_id","database_name",b"database_name","from_database",b"from_database","time",b"time"]) -> None: ...
global___RestoreDatabaseRequest = RestoreDatabaseRequest

class RestoreDatabaseMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    DATABASE_NAME_FIELD_NUMBER: builtins.int
    FROM_DATABASE_FIELD_NUMBER: builtins.int
    BACKUP_ID_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the SQLServer cluster where a database is being created."""

    database_name: typing.Text
    """Name of the SQLServer database that is being created."""

    from_database: typing.Text
    """name of the database which backup will be used to restore the database"""

    backup_id: typing.Text
    """ID of a backup to be used"""

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        database_name: typing.Text = ...,
        from_database: typing.Text = ...,
        backup_id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["backup_id",b"backup_id","cluster_id",b"cluster_id","database_name",b"database_name","from_database",b"from_database"]) -> None: ...
global___RestoreDatabaseMetadata = RestoreDatabaseMetadata

class ImportDatabaseBackupRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    DATABASE_NAME_FIELD_NUMBER: builtins.int
    S3_BUCKET_FIELD_NUMBER: builtins.int
    S3_PATH_FIELD_NUMBER: builtins.int
    FILES_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """Required. ID of the SQL Server cluster to import a database in.
    To get the cluster ID, use a [ClusterService.List] request
    """

    database_name: typing.Text
    """Name of the SQLServer database that is being imported."""

    s3_bucket: typing.Text
    """Name of object storage bucket to import backups from."""

    s3_path: typing.Text
    """Path in object storage bucket to import backups from."""

    @property
    def files(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """List of .bak files in bucket containing database backup"""
        pass
    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        database_name: typing.Text = ...,
        s3_bucket: typing.Text = ...,
        s3_path: typing.Text = ...,
        files: typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","database_name",b"database_name","files",b"files","s3_bucket",b"s3_bucket","s3_path",b"s3_path"]) -> None: ...
global___ImportDatabaseBackupRequest = ImportDatabaseBackupRequest

class ImportDatabaseBackupMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    DATABASE_NAME_FIELD_NUMBER: builtins.int
    S3_BUCKET_FIELD_NUMBER: builtins.int
    S3_PATH_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the SQLServer cluster where a database is being imported."""

    database_name: typing.Text
    """Name of the SQLServer database that is being imported."""

    s3_bucket: typing.Text
    """Name of object storage bucket to import backups from."""

    s3_path: typing.Text
    """Path in object storage bucket to import backups from."""

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        database_name: typing.Text = ...,
        s3_bucket: typing.Text = ...,
        s3_path: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","database_name",b"database_name","s3_bucket",b"s3_bucket","s3_path",b"s3_path"]) -> None: ...
global___ImportDatabaseBackupMetadata = ImportDatabaseBackupMetadata

class ExportDatabaseBackupRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    DATABASE_NAME_FIELD_NUMBER: builtins.int
    S3_BUCKET_FIELD_NUMBER: builtins.int
    S3_PATH_FIELD_NUMBER: builtins.int
    PREFIX_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """Required. ID of the SQL Server cluster to export a database from.
    To get the cluster ID, use a [ClusterService.List] request
    """

    database_name: typing.Text
    """Name of the SQLServer database that is being exported."""

    s3_bucket: typing.Text
    """Name of object storage bucket to export backups to"""

    s3_path: typing.Text
    """Path in object storage bucket to export backups to."""

    prefix: typing.Text
    """Prefix for .bak files to"""

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        database_name: typing.Text = ...,
        s3_bucket: typing.Text = ...,
        s3_path: typing.Text = ...,
        prefix: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","database_name",b"database_name","prefix",b"prefix","s3_bucket",b"s3_bucket","s3_path",b"s3_path"]) -> None: ...
global___ExportDatabaseBackupRequest = ExportDatabaseBackupRequest

class ExportDatabaseBackupMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    CLUSTER_ID_FIELD_NUMBER: builtins.int
    DATABASE_NAME_FIELD_NUMBER: builtins.int
    S3_BUCKET_FIELD_NUMBER: builtins.int
    S3_PATH_FIELD_NUMBER: builtins.int
    cluster_id: typing.Text
    """ID of the SQLServer cluster where a database is being exported."""

    database_name: typing.Text
    """Name of the SQLServer database that is being exported."""

    s3_bucket: typing.Text
    """Name of object storage bucket to import backups from."""

    s3_path: typing.Text
    """Path in object storage bucket to import backups from."""

    def __init__(self,
        *,
        cluster_id: typing.Text = ...,
        database_name: typing.Text = ...,
        s3_bucket: typing.Text = ...,
        s3_path: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_id",b"cluster_id","database_name",b"database_name","s3_bucket",b"s3_bucket","s3_path",b"s3_path"]) -> None: ...
global___ExportDatabaseBackupMetadata = ExportDatabaseBackupMetadata
